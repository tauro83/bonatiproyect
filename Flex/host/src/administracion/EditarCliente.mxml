<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" initialize="resetVars()" borderColor="#15AD8F" xmlns:fc="http://www.adobe.com/2006/fc" >
	
		<mx:Script>
		<![CDATA[
		
			//=======================================================================
			// FECHA CREACIÓN: 06/10/09
			// AUTOR: Esteban Cruz
			// Panel de busqueda del sistema, dentro de esta se pueden realizar 
			// busquedas para: Mascota, Cliente, Atencion, Producto, Aviso, Usuario
			//=======================================================================
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import services.BusquedaService;
			import mx.events.CloseEvent;
			import mx.events.DropdownEvent;
			import mx.core.Application;
			import mx.controls.dataGridClasses.DataGridColumn;
			import flash.events.MouseEvent;
            import mx.events.FlexEvent;
            import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			
			import transferObjects.Cliente;

			[Bindable]
			private var clientes:ArrayCollection;
			
			[Bindable]
			private var nuevaRut2:String;
			
			[Bindable]
			public var newCli:Cliente;
			//private var clientillo:ClienteService;
			private var clienteAux:Cliente;
			private var clienteAuxEditado:Cliente;
			public var newCli2:EditClienteUpdate;
			//var newCli2:EditClienteUpdate = Application.application.ediCliUp;
			
			/**
			 * @author  "Raul Lopez"
			 * @Fecha  20 Septiembre
			 * @Funcion que  recibe un objeto cliente, del cual obtiene todos sus datos y los copia en una instancia de un panel EditClienteUpdate
			 * en donde se rellenan los campos de este con el fin de que usuario visualize todos los datos cliente a modificar.
			 */
			public function editClientillo(clientillo:Cliente):void
			
			{
					
	
					var newCli2:EditClienteUpdate = Application.application.ediCliUp; 		
				    var list1:Array= new Array();
					list1 = clientillo.nombre.split(" ",1);
				    newCli2.nombre.text = list1.pop();
				    
				    list1 = clientillo.apellido.split(" ",1);
				    newCli2.apellido.text = list1.pop();
				    
				    list1 = clientillo.apellido2.split(" ",1);
				    newCli2.apellido2.text = list1.pop();
				    
				    list1 = clientillo.rut.split(" ",1);
				    newCli2.rut.text = list1.pop();
				    
				    list1 = clientillo.rut2.split(" ",1);
				    newCli2.rut2.text = list1.pop();
				    
				    list1 = clientillo.telefono.split(" ",1);
				    newCli2.telefono.text= list1.pop();
				    
				    list1 = clientillo.telefono2.split(" ",1);
				    newCli2.telefono2.text = list1.pop();
				    
				    list1 = clientillo.celular.split(" ",1);
				    newCli2.celular.text = list1.pop();
				    
				    list1 = clientillo.celular2.split(" ",1); 
				    newCli2.celular2.text  = list1.pop();
				    
				
				    //list1 = clientillo.direccion.split(" ",1);
				    //newCli2.direccion.text = list1.pop();
				    newCli2.direccion.text   = clientillo.direccion;
				    
				    list1 = clientillo.region.split(" ",1);
				    newCli2.region.text = list1.pop();
				    
				    list1 = clientillo.comuna.split(" ",1);
				    newCli2.comuna.text = list1.pop();
				    
				    list1 = clientillo.email.split(" ",1);
				    newCli2.email.text = list1.pop();
				    
				    list1 = clientillo.email.split(" ",1);
				    newCli2.email2.text = list1.pop();
				    //list1 = clientillo.email2.split(" ",1);
				    //Alert.show(list1.pop());
				    //newCli2.email2.text = list1.pop();

					newCli2.carga(clientillo);
					//Alert.show("Tirillas");
					this.setVisible(false,false);
					newCli2.setVisible(true,false);
					

			}
			
			
			
			/**
			 * @author  "Raul Lopez"
			 * @Fecha  20 Septiembre
			 * @Funcion que verifica si el rut del cliente que se busca existe, de ser asi envia el objeto que es solicitado
		*/
		private function ctm():void
		{
			
			var i:int;
			var j:int;
			var res:int=0;
			var aux:int=0;
			var ouput:String;
			var list:Array  = new Array();
			var list2:Array = new Array();
			var list3:Array = new Array();
			var nuevaRut:String;
			//var nuevaRut2:String;
			var codVerif:String;
			///////////////////////
			var AuxcodCiudad:String;
			var Aux2codCiudad:String;
			var codCiudad:String;
			var telSolo:String;
			
			var AuxcodCel:String;
			var Aux2codCel:String;
			var codCel:String;
			var numCel:String;
			//////////////////////
			getAllCliente();
			//Alert.show("hola1 .."+clientes.length+"...");
			for(i=0;i<clientes.length;i++)
			{
				list = clientes[i].rut.split(" ",1);
				nuevaRut  = list.pop();
				
			    //nuevaRut2 = rut.text.concat(rut2.text);
			    //nuevaRut2 = gridCliente.selectedItem.rut;
			    codVerif  = nuevaRut2.charAt(8);
			    
			   
			
				if(nuevaRut == nuevaRut2)
				{
					
					clienteAux = clientes[i] as Cliente;
					
					list2 = clienteAux.telefono.split(" ",1);
			   	    AuxcodCiudad = list2.pop();
			        Aux2codCiudad= AuxcodCiudad;
			        codCiudad    = AuxcodCiudad.slice(0,2);//
			   		telSolo      = Aux2codCiudad.slice(2,8);//
			        
			        
			        list3     = clienteAux.celular.split(" ",1);
			        AuxcodCel = list3.pop();
			        Aux2codCel= AuxcodCel;
			        codCel    = AuxcodCel.charAt(0);
			        numCel    = Aux2codCel.slice(1,8);
			        //Alert.show(numCel);
			        
			        clienteAux.rut      = nuevaRut2.slice(0,8);//le copie el rut sin codigo verificador junto
					clienteAux.rut2     = codVerif;//le copie el codigo verificador
					clienteAux.telefono = codCiudad;//copio codigo ciudad
					clienteAux.telefono2= telSolo;//copio num telefono fijo solo
					clienteAux.celular  = codCel;//copio prefijo celular
					clienteAux.celular2 = numCel;//copio num celular solo
					/*
					Alert.show(clienteAux.rut);
					Alert.show(clienteAux.rut2);
					Alert.show(clienteAux.telefono);
					Alert.show(clienteAux.telefono2);
					Alert.show(clienteAux.celular);
					Alert.show(clienteAux.celular2);
					*/
					res=1;
					break;
				}
			}
			if(res==1){
				//Alert.show(clienteAux.rut);
				this.editClientillo(clienteAux);
				
			}
			else{
				Alert.show("Cliente no se encuentra en Base de Datos");
			}
		 }
		 /**
			 * @author  "Raul Lopez"
			 * @Fecha  20 Septiembre
			 * @Funcion que reinicia a vac?o las variables de rut del panel de ingreso de b?squeda y mensaje de aviso del panel
		*/
		 public function resetVars():void
			{
				//rut.text  = "";
				//rut2.text = "";
				labelMessage.text = "";
				

			}
		public function linkEditarCli2():void
		{
		   Application.application.setVisible();
		   Application.application.panelEditaCLi.setVisible(true,false);
		}
		
			/**
			 *  Sale de la búsqueda
			 *  @author  "Esteban Cruz"
			 **/
			private function volver():void
            {
            	Application.application.setInvisible();
            	Application.application.agenda2.setVisible(true,false);
            	Application.application.menuAgenda1.setVisible(true,false);
            }
            
            /**
             *  Reinicia el panel de busqueda
			 *  @author  "Esteban Cruz"
			 **/
            public function reiniciar():void
            {
            	
            	comboboxCliente.selectedIndex=0;
            	gridCliente.dataProvider=null;
            	inputClienteEmail.dataProvider=null;
            	inputClienteNombre.dataProvider=null;
            	inputClienteTel.dataProvider=null;
            	inputClienteRut.dataProvider=null;
            	inputClienteApellido.dataProvider=null;
            	inputClienteApellido2.dataProvider=null;
            	
            	
            	textBuscar.visible=false;
            	setInvisibleInput();
            }
            		
			/**
			 *  Hace invisible a todos los elementos del componente
			 *  @author  "Esteban Cruz"
			 **/
			private function setInvisibleInput ():void
            {
            	
            	
            	inputClienteEmail.setVisible(false,false);
            	inputClienteNombre.setVisible(false,false);
            	inputClienteTel.setVisible(false,false);
            	inputClienteRut.setVisible(false,false);
            	inputClienteApellido.setVisible(false,false);
            	inputClienteApellido2.setVisible(false,false);
            	
            }
            
            /**
			 *  Hace visible los elementos correspondientes al objeto
			 *  que se selecciono desde el 1er combobox
			 *  @author  "Esteban Cruz"
			 **/
			private function seleccionarBusqueda (event:Event):void
            {   
            	
				comboboxCliente.setVisible(false,false);
				gridCliente.setVisible(false,false);
				reiniciar();
            	switch (combobox.selectedLabel)
				{
				
				case 'Cliente':
					comboboxCliente.setVisible(true,false);
					gridCliente.setVisible(true,false);
				break;
				}
            }

		   /**
			 * @author  "Raul Lopez"
			 * @Fecha  20 Septiembre
			 * @Funcion que recibe de la base datos todos los clientes existentes, esto se recibe y se realiza una b?squeda del rut del cliente
			 * para de este obtener sus datos.
		    */
			public function getAllCliente():void
			{
				var personService:ClienteEditService = new ClienteEditService();
				personService.addEventListener(ResultEvent.RESULT,getAllClienteEResult);
				personService.getAllClientesE();
				
			}
			/**
			 * @author  "Raul Lopez"
			 * @Fecha  20 Septiembre
			 * @Funcion que copia el conjunto de clientes recibidos en un arrayColecction llamado clientes
			 */
			private function getAllClienteEResult(event:ResultEvent):void
			{
				clientes = event.result as ArrayCollection;
				
			}
		   
		   
		   /**
		    *  Busca todos los clientes existentes en la base de datos
			*  @author  "Esteban Cruz"
			**/
		   public function getAllClientes():void
		   {
		   		var busquedaService:BusquedaService = new BusquedaService();
		   		busquedaService.addEventListener(ResultEvent.RESULT,getAllClientesResult);
				busquedaService.getAllClientes();
		   }
		   
		   public function getAllClientesResult(event:ResultEvent):void
		   {
		   		clientes = event.result as ArrayCollection;
		   }
		   
		    /**
		    *  Combobox de cliente
			*  @author  "Esteban Cruz"
			**/
		   private function seleccionarCliente (event:Event):void
            {
            	setInvisibleInput();
            	getAllClientes();
            	textBuscar.setVisible(true, false);
            	switch (comboboxCliente.selectedLabel){
				case 'E-mail':		
					inputClienteEmail.setVisible(true,false);
				break; 
				case 'Nombre':		
					inputClienteNombre.setVisible(true,false);
				break; 
				case 'Teléfono':		
					inputClienteTel.setVisible(true,false);
				break; 
				case 'Rut':		
					inputClienteRut.setVisible(true,false);
				break; 	
				case 'Apellido materno':		
					inputClienteApellido2.setVisible(true,false);
				break; 	
				case 'Apellido paterno':		
					inputClienteApellido.setVisible(true,false);
				break; 	
				}
            }
		   
		  
		  
            
			
			/**
		    *  Selecciona cualquier elemento del input Cliente
			*  @author  "Esteban Cruz"
			**/
            public function inputClienteNombreS(event:Event):void
			{
				inputClienteNombre.text=inputClienteNombre.selectedLabel;
			}
			 public function inputClienteRutS(event:Event):void
			{
				inputClienteRut.text=inputClienteRut.selectedLabel;
			}
			 public function inputClienteTelS(event:Event):void
			{
				inputClienteTel.text=inputClienteTel.selectedLabel;
			}
			 public function inputClienteEmailS(event:Event):void
			{
				inputClienteEmail.text=inputClienteEmail.selectedLabel;
			}
			 public function inputClienteApellidoS(event:Event):void
			{
				inputClienteApellido.text=inputClienteApellido.selectedLabel;
				
			}
			public function inputClienteApellido2S(event:Event):void
			{
				inputClienteApellido2.text=inputClienteApellido2.selectedLabel;
			}
			
			public function editaCliente(event:Event):void
			{
				
				if(gridCliente.selectedItem){
					var newClienteUpdate:EditClienteUpdate = Application.application.ediCliUp;
					newCli = new Cliente;
					newCli.nombre         = gridCliente.selectedItem.nombre;
					newCli.apellido       = gridCliente.selectedItem.apellidoPaterno;
					newCli.apellido2	  = gridCliente.selectedItem.apellidoMaterno;
					newCli.rut        	  = gridCliente.selectedItem.rut;
					newCli.telefono       = gridCliente.selectedItem.telefono;
					newCli.celular        = gridCliente.selectedItem.celular;
					newCli.direccion	  = gridCliente.selectedItem.direccion;
					newCli.region         = gridCliente.selectedItem.region;
					newCli.comuna		  = gridCliente.selectedItem.comuna;
					newCli.email          = gridCliente.selectedItem.email;
					newCli.estado         = gridCliente.selectedItem.estado;
					
					
					Application.application.panelEditaCLi.setVisible(false,false);
					newClienteUpdate.carga(newCli);
					Application.application.ediCliUp.setVisible(true,false);
					
				}
				else{
					this.labelMessage.text="Seleccione un Cliente para editar.";
				}
				
			}
			public function rut():void{
			
			   rutClienteInput.text = gridCliente.selectedItem.rut;
			   nuevaRut2 = gridCliente.selectedItem.rut;
			   ctm();
			}
			
			
			
			

		]]>
	</mx:Script>
	
	<mx:Button x="632" y="353" label="Volver" width="102" cornerRadius="6" id="idCancelar" click="volver()" height="23"/>
	<mx:ComboBox x="96" y="24" width="150" id="combobox" change="seleccionarBusqueda(event)" >
		<mx:ArrayCollection>
			<mx:Object label="-Seleccionar-"/>
			<mx:Object label="Cliente"/> 
			
		</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:Text x="30" y="26" id="textFiltrar" text="Filtrar por"/>
	<mx:Text x="523" y="26" text="Buscar" id="textBuscar" visible="false"/>

	<!-- AutoComplete para cada parametro -->
	
	<!-- input Cliente -->
	<fc:AutoComplete close="inputClienteNombreS(event)" id="inputClienteNombre" x="572" y="24" width="150" dataProvider="{clientes}" labelField="nombre" visible="false"/>
	<fc:AutoComplete close="inputClienteRutS(event)" id="inputClienteRut" x="572" y="24" width="150" dataProvider="{clientes}" labelField="rut" visible="false"/>
	<fc:AutoComplete close="inputClienteTelS(event)" id="inputClienteTel" x="572" y="24" width="150" dataProvider="{clientes}" labelField="telefono2" visible="false"/>
	<fc:AutoComplete close="inputClienteEmailS(event)" id="inputClienteEmail" x="572" y="24" width="150" dataProvider="{clientes}" labelField="email" visible="false"/>
	<fc:AutoComplete close="inputClienteApellidoS(event)" id="inputClienteApellido" x="572" y="24" width="150" dataProvider="{clientes}" labelField="apellido" visible="false"/>
	<fc:AutoComplete close="inputClienteApellido2S(event)" id="inputClienteApellido2" x="572" y="24" width="150" dataProvider="{clientes}" labelField="apellido2" visible="false"/>
	
	<!-- Cliente: combobox y grid -->
	<mx:ComboBox x="254" y="24" id="comboboxCliente" width="150" visible="false" change="seleccionarCliente(event)">
		<mx:ArrayCollection>
			<mx:Object label="-Seleccionar-"/>
			<mx:Object label="Apellido materno"/>
			<mx:Object label="Apellido paterno"/>
			<mx:Object label="E-mail"/>
			<mx:Object label="Nombre"/>
			<mx:Object label="Rut"/>
			<mx:Object label="Teléfono"/>
		</mx:ArrayCollection>
	</mx:ComboBox>
	
	<mx:DataGrid x="30" y="52" width="692" height="283" id="gridCliente" visible="true" dataProvider="{clientes}" click="{rut()}">
		<mx:columns>
			<mx:DataGridColumn headerText="Nombre" dataField="nombre"/>
			<mx:DataGridColumn headerText="Apellido paterno" dataField="apellido"/>
			<mx:DataGridColumn headerText="Apellido materno" dataField="apellido2"/>
			<mx:DataGridColumn headerText="Rut" dataField="rut"/>
			<mx:DataGridColumn headerText="E-mail" dataField="email"/>
			<mx:DataGridColumn headerText="Teléfono" dataField="telefono"/>
			<mx:DataGridColumn headerText="Celular" dataField="celular" visible="false"/>
			<mx:DataGridColumn headerText="Direccion" dataField="direccion" visible="false"/>
			<mx:DataGridColumn headerText="Region" dataField="region" visible="false"/>
			<mx:DataGridColumn headerText="Comuna" dataField="comuna" visible="false"/>
			<mx:DataGridColumn headerText="Estado" dataField="estado" visible="false"/>
			
		</mx:columns>
	</mx:DataGrid>
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:TextInput  restrict="0-9" x="46" y="363" width="90.5" id="rutClienteInput" maxChars="9" visible="false"/>
	
</mx:Panel>
