<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" title="Registro Control" borderColor="#15AD8F" initialize="iniciar()">
		<mx:Script>
		<![CDATA[
			import mx.charts.DateTimeAxis;
		
			//=======================================================================
			// FECHA: CREACIÓN: 27 Octubre
			// AUTOR: Sebastian Arancibia
			// Panel de registro de control, dentro de esta se pueden realizar 
			// busqueda de cliente por nommbre, por rut, acceder a la mascota y luego registrar control
			//=======================================================================
			import mx.collections.ArrayCollection;
			import transferObjects.Mascota;
			import services.MascotaService;
			import pabellon.AddCirugiaService;
			import mx.rpc.events.ResultEvent;
			import transferObjects.Usuario;
			import transferObjects.Cita;
			import transferObjects.Control;
			import administracion.UsuarioEditService;
			import mx.controls.Alert;
			import services.DiaAgendaServices;
			import Policlinico.AddControlService;
			
			
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Lista de arraylist que son ocupados en el program
			 *  clientes: Lista de clientes que son buscados por el ususario
			 * 	
			 * */
			[Bindable]
            public var clientes:ArrayCollection = new ArrayCollection(
                [ {nombre:"Sebastian", apellido:"Arancibia", rut: "16358963-K", telefono:"89739716"} ]); 
                  
            [Bindable]
            public var mascotas:ArrayCollection = new ArrayCollection(
                [{col1:"Martin", col2:"Perro", col3:"Boxer", col4:"16358963-K", col5:"Sebastian Arancibia"}]); 
			
			[Bindable]
            public var tiposBusqueda:ArrayCollection = new ArrayCollection(
                [ {label:"Rut", data:"BusquedaRut"}, 
                  {label:"Nombre", data:"BusquedaNombre"} ]); 
           
            [Bindable]
			private var usuarios:ArrayCollection;
			[Bindable]
			private var usuarios2:ArrayCollection;
			[Bindable]
			private var responsableSeleccionado:String;
			[Bindable]
			private var horasLibres:ArrayCollection;
			
			private var c1:Cita;
              
              
             /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion inicial que carga los datos importantes desde la base de datos		
			 * */
			 public function iniciar():void{
			 	getAllUsuarios();
			 }
			 
			 /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  28 Septiembre
			 *  @Descripcion Metodo que recibe el panel EditUsuario (newRegUsuar), para almacenarlo, 
			 * inicializa la variable personService, para poder llamar a los metodos de este
			 * para lograr comunicarse con las clases y metodos de java.	 		
			 * */
			public function getAllUsuarios():void
			{
				var personService:UsuarioEditService = new UsuarioEditService();
				personService.addEventListener(ResultEvent.RESULT,getAllUsuariosEResult);
				personService.getAllUsuariosE();
				
			}
			
			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  28 Septiembre
			 *  @Descripcion Metodo que El resultado de la llamada en el metodo anterior, a las clases de java
			 * es recibido en este metodo y almacenado en un ArrayCollection, el cual sera el dataProvider 
			 * del datagrid, para mostrar los datos de los usuarios que existen en el sistema.	 		
			 * */
			private function getAllUsuariosEResult(event:ResultEvent):void
			{
				usuarios = event.result as ArrayCollection;	
				usuarios2 = new ArrayCollection();
				responsableSeleccionado = usuarios.getItemAt(0).usuario.split(" ",1).pop();
				for(var i:int = 0; i<usuarios.length; i++){
					usuarios2.addItem({label:usuarios.getItemAt(i).nombre.split(" ",1).pop()+" "+usuarios.getItemAt(i).apellidoPaterno.split(" ",1).pop(), usuario:usuarios.getItemAt(i).usuario.split(" ",1).pop()});
				}					
			}
			 
			       
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que si la mascota esta en alta medica, no se agrega un nuevo control		
			 * */    
            public function altaMedica():void{
            	if(!altaMedicaBox.selected){
            		horaProximoControl.enabled = false;
            		fechaProximoControl.enabled = false;
            		responsable.enabled = false;
            	}
            	else{
            	    horaProximoControl.enabled = true;
            		fechaProximoControl.enabled = true;
            		responsable.enabled = true;
            	}
            }
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado 		
			 * */
            public function nuevoControl():void{
            	currentState="NuevoControl";
            	nombreMascota.text = "Martin";
            	rutClienteInput0.text = "16358963";
            	rutClienteDVInput0.text = "K";
            }
            
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado ya sea que va a una pagina o vuelve de otra		
			 * */
            public function volver():void{
            	
            	//Consulta si el estado en que se encuentra es BusquedaNombre, para de esta forma llenar el
            	//formulario siguiente
            	if(currentState == "BusquedaNombre" || currentState == "NuevoControl"){
            		currentState="BusquedaRut";
            	}
            }
            
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado 		
			 * */
            public function buscarPorRut():void{
            	
            	//Consulta si el estado en que se encuentra es BusquedaNombre, para de esta forma llenar el
            	//formulario siguiente
            	if(currentState == "BusquedaNombre"){
            		rutClienteInput0.text = "16358963";
            		rutClienteDVInput0.text = "K";
            	}
            	currentState="BusquedaRut";
            }
                       /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado 		
			 * */
            public function cambiarEstado(event:Event):void{
            	currentState=ComboBox(event.target).selectedItem.data;
            	//Consulta si el estado en que se encuentra es BusquedaNombre, para de esta forma llenar el
            	//formulario siguiente
            	if(currentState == "BusquedaNombre"){
            		rutClienteInput0.text = " ";
            		rutClienteDVInput0.text = " ";
            	}
            	
            }
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion para retornar las mascotas desde las otras capas		
			 * */
            public function getMascotas():void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addMascotaService.getMascotas(rutClienteInput0.text+rutClienteDVInput0.text);
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion escucha que retorn las mascotas desde las otras capas 		
			 * */
			public function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que luego de seleccionado un responsable se buscan las horas disponible de este 
			 **/
			public function asignarResponsable(event:Event):void{
				var itemSeleccionado:Object = event.currentTarget.selectedItem;
				responsableSeleccionado = itemSeleccionado.usuario;
				consultarHoras();
				//Alert.show(itemSeleccionado.usuario.split(" ",1).pop());			
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que registra todos los datos del control, inclusive si existe un proximo contro
			 **/
			public function registrarControl():void{
				if(altaMedicaBox.selected){
					registrarProximoControl();
				}
				registrarActualControl();
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que crea una instancia del transferObject cita,
			 *  posterior a la validacion de datos  y lo envia a citaServices		 		
			 * */
			private function registrarActualControl():void
			{								 
					var cc:Control = new Control();
					
					cc.cliente = rutClienteInput0.text + rutClienteDVInput0.text;
					cc.mascota = nombreMascota.text;
					cc.fecha = new Date();
					cc.responsable = responsableSeleccionado;
					cc.costo = costo.text;
					cc.descripcion = descripcion.text;
					cc.servicio = "Policlínico"
					
					var addControlService:AddControlService=new AddControlService();
					addControlService.addEventListener(ResultEvent.RESULT,addActualControlServiceResult);
					addControlService.addActualControl(cc);
																					
			}	
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion retorna el resultado de la accion que se realizo:Registro.		
			 * */
			private function addActualControlServiceResult(event:ResultEvent):void
			{
				var result:int = event.result as int ;
				if(!result>0)
					labelMessage.text = "Actual control no registrado."
				else{
					labelMessage.text = "Actual control registrado correctamente."
				}	
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que crea una instancia del transferObject cita,
			 *  posterior a la validacion de datos  y lo envia a citaServices		 		
			 * */
			private function registrarProximoControl():void
			{								 
					var cc:Cita = new Cita();
					cc.cliente = rutClienteInput0.text + rutClienteDVInput0.text;
					cc.mascota = nombreMascota.text;
					cc.fecha = fechaProximoControl.selectedDate.date +"/"+ (fechaProximoControl.selectedDate.month+1) +"/"+ fechaProximoControl.selectedDate.fullYear;
					cc.hora	= horaProximoControl.text
					cc.servicio = "Policlínico";
					cc.usuario = responsableSeleccionado;
					
					var addControlService:AddControlService=new AddControlService();
					addControlService.addEventListener(ResultEvent.RESULT,addProxControlServiceResult);
					addControlService.addProxControl(cc);
																					
				}			
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion retorna el resultado de la accion que se realizo:Registro.		
			 * */
			private function addProxControlServiceResult(event:ResultEvent):void
			{
				var result:int = event.result as int ;
				if(!result>0)
					labelMessage.text = "Próximo control no registrado."
				else{
					labelMessage.text = "Próximo control registrado correctamente."
				}	
			}
			
			
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que filtra las horas disponibles del Responsable
			 **/
			public function consultarHoras():void{
				if(fechaProximoControl.text != ""){
					var diaAgenda:DiaAgendaServices = new DiaAgendaServices();
					diaAgenda.addEventListener(ResultEvent.RESULT,consultarHorasDisponiblesResult);
					diaAgenda.getDiaAgenda(fechaProximoControl.selectedDate.date+"/"+(fechaProximoControl.selectedDate.month+1)+"/"+fechaProximoControl.selectedDate.fullYear);
				}
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que filtra las horas disponibles del Responsable para el proximo control
			 **/
			private function consultarHorasDisponiblesResult(event:ResultEvent):void{
				var horas:ArrayCollection = new ArrayCollection();
                var horasOcupadas:ArrayCollection = new ArrayCollection();
                
				horas = event.result as ArrayCollection;
				
				for(var i:int=0; i< horas.length; i++){
					if(responsableSeleccionado == horas.getItemAt(i).responsable){
						horasOcupadas.addItem(horas.getItemAt(i).hora);
					}
				}
				
				horasLibres  = new ArrayCollection();
				
				if(!horasOcupadas.contains("10:30")){horasLibres.addItem({label:"10:30"});}
				if(!horasOcupadas.contains("11:00")){horasLibres.addItem({label:"11:00"});}
				if(!horasOcupadas.contains("11:30")){horasLibres.addItem({label:"11:30"});}
				if(!horasOcupadas.contains("12:00")){horasLibres.addItem({label:"12:00"});}
				if(!horasOcupadas.contains("12:30")){horasLibres.addItem({label:"12:30"});}
				if(!horasOcupadas.contains("15:30")){horasLibres.addItem({label:"15:30"});}
				if(!horasOcupadas.contains("16:00")){horasLibres.addItem({label:"16:00"});}
				if(!horasOcupadas.contains("16:30")){horasLibres.addItem({label:"16:30"});}
				if(!horasOcupadas.contains("17:00")){horasLibres.addItem({label:"17:00"});}
				if(!horasOcupadas.contains("17:30")){horasLibres.addItem({label:"17:30"});}
				if(!horasOcupadas.contains("18:00")){horasLibres.addItem({label:"18:00"});}
				if(!horasOcupadas.contains("18:30")){horasLibres.addItem({label:"18:30"});}
				if(!horasOcupadas.contains("19:00")){horasLibres.addItem({label:"19:00"});}
				if(!horasOcupadas.contains("19:30")){horasLibres.addItem({label:"19:30"});}
				
				horaProximoControl.dataProvider = horasLibres;
			}
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="BusquedaRut">
			<mx:RemoveChild target="{labelMessage}"/>
		</mx:State>
		<mx:State name="NuevoControl">
			<mx:AddChild position="lastChild">
				<mx:ComboBox id="horaProximoControl" x="482" y="225" width="160" dataProvider="{horasLibres}"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="56" y="104" text="Actual Control" fontWeight="bold" id="label7"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="104" text="Próximo Control" fontWeight="bold" id="label10"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="56" y="140" text="Descripción:" width="84" id="label8"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="183" text="Fecha:" width="52" id="label9"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="225" text="Hora:" width="52" id="label11"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="138" text="Responsable:" width="97" id="label12"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextArea x="143" y="139" width="169" height="108" id="descripcion"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DateField id="fechaProximoControl" x="484" y="183" width="158" formatString="DD/MM/YYYY" change="consultarHoras()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:CheckBox id="altaMedicaBox" x="148" y="255" label="Próximo control" change="altaMedica()" selected="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ComboBox id="responsable" x="482" y="136" dataProvider="{usuarios2}" close="asignarResponsable(event)"></mx:ComboBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="549" y="320" label="Registrar" visible="true" id="registrar" click="registrarControl()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="636" y="320" label="Cancelar" width="84" id="cancelar" visible="true" click="buscarPorRut()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{labelMessage}" position="before">
				<mx:Label x="393" y="42" text="Nombre:" width="64" id="label6"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="478" y="42" id="nombreMascota"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label14}"/>
			<mx:SetProperty target="{label0}" name="x" value="56"/>
			<mx:RemoveChild target="{label1}"/>
			<mx:SetProperty target="{rutClienteDVInput0}" name="x" value="279.5"/>
			<mx:SetProperty target="{rutClienteDVInput0}" name="y" value="42"/>
			<mx:SetProperty target="{rutClienteInput0}" name="x" value="141"/>
			<mx:SetProperty target="{rutClienteInput0}" name="y" value="42"/>
			<mx:SetProperty target="{label3}" name="x" value="268.5"/>
			<mx:SetProperty target="{label3}" name="y" value="44"/>
			<mx:SetProperty target="{label4}" name="x" value="56"/>
			<mx:SetProperty target="{label4}" name="y" value="42"/>
			<mx:AddChild relativeTo="{label4}" position="before">
				<mx:Label x="393" y="10" text="Mascota" fontWeight="bold" id="label2"/>
			</mx:AddChild>
			<mx:RemoveChild target="{datagrid1}"/>
			<mx:RemoveChild target="{label5}"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{button2}"/>
			<mx:RemoveChild target="{textinput1}"/>
			<mx:RemoveChild target="{label13}"/>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="143" y="294" width="169" id="costo"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label9}" position="before">
				<mx:Label x="56" y="296" text="Costo:" width="49" id="label15"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>

	<mx:Label x="167" y="380" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="40" y="10" text="Cliente" fontWeight="bold" id="label1"/>
	<mx:Label x="40" y="10" text="Cliente" fontWeight="bold" id="label0"/>
	<mx:Label x="40" y="48" text="Rut:" width="37" id="label4"/>
	<mx:Label x="259.5" y="50" text="-" width="14.75" textAlign="center" id="label3"/>
	<mx:TextInput  restrict="0-9" x="132" y="48" width="130.5" id="rutClienteInput0" maxChars="8"/>
	<mx:TextInput x="270.5" y="48" width="19.5" id="rutClienteDVInput0" maxChars="1" restrict="K k 0-9"/>
	<mx:Label x="167" y="380" width="407" height="17" id="labelMessage0" textAlign="center" fontWeight="bold"/>
	<mx:Label x="388" y="48" text="Apellido:" width="84" id="label14"/>
	<mx:Label x="40" y="94" text="Cliente" fontWeight="bold" id="label5"/>
	<mx:Label x="313" y="94" text="Mascota" fontWeight="bold" id="label13"/>
	<mx:DataGrid x="40" y="120" width="681" height="208" doubleClickEnabled="true" id="datagrid1" selectable="true" itemDoubleClick="nuevoControl()" dataProvider="{mascotas}">
		<mx:columns>
		    <mx:DataGridColumn headerText="Rut" dataField="col4"/>
			<mx:DataGridColumn headerText="Nombre" dataField="col5"/>
			<mx:DataGridColumn headerText="Nombre" dataField="col1"/>
			<mx:DataGridColumn headerText="Especie" dataField="col3"/>
			<mx:DataGridColumn headerText="Raza" dataField="col2"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Button x="646" y="350" label="Cancelar" id="button1" click="volver()"/>
	<mx:Button x="559" y="350" label="Siguiente" id="button2"/>
	<mx:TextInput x="459" y="46" width="262" id="textinput1"/>
	
</mx:Panel>