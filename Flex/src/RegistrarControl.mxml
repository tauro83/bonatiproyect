<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" title="Registro Control" borderColor="#15AD8F" initialize="iniciar()" xmlns:ns1="com.adobe.flex.extras.controls.*">
		<mx:Script>
		<![CDATA[
			import mx.charts.DateTimeAxis;
		
			//=======================================================================
			// FECHA: CREACIÓN: 27 Octubre
			// AUTOR: Sebastian Arancibia
			// Panel de registro de control, dentro de esta se pueden realizar 
			// busqueda de cliente por nommbre, por rut, acceder a la mascota y luego registrar control
			//=======================================================================
			import mx.collections.ArrayCollection;
			import transferObjects.Mascota;
			import services.MascotaService;
			import pabellon.AddCirugiaService;
			import services.AddMascotaService;
			import mx.rpc.events.ResultEvent;
			import transferObjects.Usuario;
			import transferObjects.Cita;
			import transferObjects.Control;
			import transferObjects.Cliente;
			import administracion.UsuarioEditService;
			import mx.controls.Alert;
			import services.DiaAgendaServices;
			import Policlinico.AddControlService;
			import mx.core.Application;
			import services.BusquedaService;
						
			[Bindable]
			private var cliente2:ArrayCollection;
			
			public var clienteBD:Cliente;
			
			
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Lista de arraylist que son ocupados en el programa
			 *  clientes: Lista de clientes que son buscados por el usuario
			 *  mascotas: Mascotas que son cargadas cuando es encontrado el cliente
			 *  usuarios: Usuarios que son cargados al combobox
			 * 	usuarios2: Lista supleten para cuando son cargados
			 * 	responsableSleccionado: Nombre de usuario del responsable que es seleccionado
			 *  horasLibres: Lista de horas libres que son utilizada cuando se quiere fijar una hora
			 *               de control para el cliente. cuando se selecciona la fecha, se filtra para obtener
			 * 				 solo las horas disponibles
			 * 	
			 * */
			[Bindable]
            public var clientes:ArrayCollection = new ArrayCollection();    
            [Bindable]
            public var mascotas:ArrayCollection = new ArrayCollection(); 
            [Bindable]
            public var costoFinal:String = "";
            [Bindable]
			private var usuarios:ArrayCollection;
			[Bindable]
			private var usuarios2:ArrayCollection;
			[Bindable]
			private var responsableSeleccionado:String;
			[Bindable]
			private var horasLibres:ArrayCollection;
			private var c1:Cita;
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  2 de Noviembre de 2009
			 *  Funcion que dado un string de numeros y un separado retorna un valor formateado se utiliza
			 *  comunmente el peso chileno por ejemplo: (100000, .) el retorno es 100.000
			 * 	
			 * */
			public function makeNumberFormat (value : Object, separator : String):String{
				var str : Array = value.toString ().split ("");
				var i : Number = 0;
				var count : Number = 0
				var tmpArray : Array = []
				var back : String = ""
				str.reverse ();
				while (str [i])
				{
					if ((count % 4) == 0)
					{
						tmpArray.push (separator)
					} else
					{
						tmpArray.push (str [i])
						i ++
					}
					count ++
				}
				tmpArray.reverse ();
				i = 0;
				while (tmpArray [i])
				{
					back += tmpArray [i];
					i ++
				}
				return back.substr (0, back.length - 1);
			}  
              
             /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion inicial que carga los datos importantes desde la base de datos
			 *  Esta funcion de igual forma, que cuando ya es utilizado el panel se borran
			 *  todos los datos en estos	
			 * */
			 
			 public function iniciar():void{
			 	nombreClienteInput.text = "";
			 	rutClienteDVInput.text = "";
			 	rutClienteInput.text = "";
			 	labelMessage.text = "";
			 	registrarNuevoControl.visible = false
			 	mascotas = new ArrayCollection();
			 	getAllUsuarios();
			 }
			 
			 /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  28 Septiembre
			 *  @Descripcion Metodo que recibe el panel EditUsuario (newRegUsuar), para almacenarlo, 
			 * inicializa la variable personService, para poder llamar a los metodos de este
			 * para lograr comunicarse con las clases y metodos de java.	 		
			 * */
			 
			public function getAllUsuarios():void
			{
				var personService:UsuarioEditService = new UsuarioEditService();
				personService.addEventListener(ResultEvent.RESULT,getAllUsuariosEResult);
				personService.getAllUsuariosE();
				
			}
			
			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  28 Septiembre
			 *  @Descripcion Metodo que El resultado de la llamada en el metodo anterior, a las clases de java
			 * es recibido en este metodo y almacenado en un ArrayCollection, el cual sera el dataProvider 
			 * del datagrid, para mostrar los datos de los usuarios que existen en el sistema.	 		
			 * */
			 
			private function getAllUsuariosEResult(event:ResultEvent):void
			{
				usuarios = event.result as ArrayCollection;	
				usuarios2 = new ArrayCollection();
				responsableSeleccionado = usuarios.getItemAt(0).usuario.split(" ",1).pop();
				for(var i:int = 0; i<usuarios.length; i++){
					usuarios2.addItem({label:usuarios.getItemAt(i).nombre.split(" ",1).pop()+" "+usuarios.getItemAt(i).apellidoPaterno.split(" ",1).pop(), usuario:usuarios.getItemAt(i).usuario.split(" ",1).pop()});
				}					
			}
			 
			       
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que si la mascota esta en alta medica, no se agrega un nuevo control	
			 *  si el item altamedicaBox es deseleccionado entonces no habra un nuevo control
			 *  pero si este es seleccionado entonces habra un nuevo control, habilitando estos nuevos campos	
			 * */    
            public function altaMedica():void{
            	if(!altaMedicaBox.selected){
            		horaProximoControl.enabled = false;
            		fechaProximoControl.enabled = false;
            		responsable.enabled = false;
            	}
            	else{
            	    horaProximoControl.enabled = true;
            		fechaProximoControl.enabled = true;
            		responsable.enabled = true;
            	}
            }
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado a nuevo control para asi capturar los datos
			 *  correspondientes al control	
			 * */
            public function nuevoControl():void{
            	//cambia de estado
            	currentState="NuevoControl";
            	//Consulta si se ha seleccionado un item de la tabla
            	if(datagrid1.selectedItem){
					this.labelMessage.text="";
					nombreMascota.text = datagrid1.selectedItem.nombre.split(" ",1).pop();
				}
				else{
					//En el caso de que no se eleccione un item en la tabla se imprime en el labelMessage
					this.labelMessage.text="Seleccione una Mascota para registrar un control.";
				}
            }
            
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado ya sea que va a una pagina o vuelve de otra
			 *  en el caso de que se encuentre en el estado Nuevo control, entonces vuelve al estado
			 *  busqueda rut, pero en el caso de que este en el estado busquedarut vuelve al panel
			 *  que senaliza que se debe seleccionar para una nueva accion	
			 * */
            public function volver():void{
            	
            	//Consulta si el estado en que se encuentra es BusquedaNombre, para de esta forma llenar el
            	//formulario siguiente
            	if(currentState == "NuevoControl"){
            		currentState="BusquedaRut";
            	}
            	else{
            		//Cambia de este panel al panel que senaliza lo que se debe seleccionar para una nueva accion
            		this.visible = false;
            		Application.application.panelClinicaPrincipal.visible = true;
            	}
            }
            
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado a busqueda por rut		
			 * */
            public function buscarPorRut():void{
            	currentState="BusquedaRut";
            }
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que cambia de estado 		
			 * */
            public function cambiarEstado(event:Event):void{
            	currentState=ComboBox(event.target).selectedItem.data;
            	//Consulta si el estado en que se encuentra es BusquedaNombre, para de esta forma llenar el
            	//formulario siguiente
            	if(currentState == "BusquedaNombre"){
            		rutClienteInput.text = " ";
            		rutClienteDVInput.text = " ";
            	}
            	
            }
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion para retornar las mascotas desde las capas internas
			 *  y son agregadas a la tabla de las mascotas del cliente
			 *  seleccionado		
			 * */
            public function getMascotas():void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addMascotaService.getMascotas(rutClienteInput.text);
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion escucha que retorna las mascotas desde las capas internas
			 *  para ser agregadas a las tablas de las mascotas del cliente seleccionado		
			 * */
			public function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que luego de seleccionado un responsable se buscan las horas disponible de este 
			 **/
			public function asignarResponsable(event:Event):void{
				var itemSeleccionado:Object = event.currentTarget.selectedItem;
				responsableSeleccionado = itemSeleccionado.usuario;
				
				//funcion que dado un responsable se consultan las horas disponisbles de este
				consultarHoras();		
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que registra todos los datos del control, inclusive si existe un proximo control
			 *  en el caso de no haber un proximo control solo se selecciona el control actual
			 *  el proximo control implica la creacion de una nueva cita
			 **/
			public function registrarControl():void{
				if(altaMedicaBox.selected){
					registrarProximoControl();
				}
				registrarActualControl();
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que crea una instancia del transferObject cita,
			 *  posterior a la validacion de datos  y lo envia a citaServices		 		
			 * */
			private function registrarActualControl():void
			{		
					//nuevo objeto del tipo control				 
					var cc:Control = new Control();
					
					// Se capturan todos los datos del formulario
					
					cc.cliente = rutClienteInput.text + rutClienteDVInput.text;
					cc.mascota = nombreMascota.text;
					cc.fecha = new Date();
					cc.responsable = responsableSeleccionado;
					cc.costo = costoFinal;
					cc.descripcion = descripcion.text;
					cc.servicio = "Policlínico"
					
					
					// Se llama a un servicio de add control para agregar un nuevo objeto a la agenda
					var addControlService:AddControlService=new AddControlService();
					addControlService.addEventListener(ResultEvent.RESULT,addActualControlServiceResult);
					addControlService.addActualControl(cc);
																					
			}	
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion retorna el resultado de la accion que se realizo:Registro.		
			 * */
			private function addActualControlServiceResult(event:ResultEvent):void
			{
				var result:int = event.result as int ;
				if(!result>0)
					labelMessage.text = "Actual control no registrado."
				else{
					labelMessage.text = "Actual control registrado correctamente."
					borrarDatosActualControl();
				}	
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Se borran todos los datos del control actual (en formulario)	
			 * */
			 
			public function borrarDatosActualControl():void{
				descripcion.text = new String();
				costo.text = new String();
			}
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Se borran todos los datos del control proximo(en formulario)	
			 * */
			 			
			public function borrarDatosProximoControl():void{
				fechaProximoControl.text = new String();
				horaProximoControl.text = new String();
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que crea una instancia del transferObject cita,
			 *  posterior a la validacion de datos  y lo envia a citaServices		 		
			 * */
			private function registrarProximoControl():void
			{								 
					var cc:Cita = new Cita();
					cc.cliente = rutClienteInput.text + rutClienteDVInput.text;
					cc.mascota = nombreMascota.text;
					cc.fecha = fechaProximoControl.selectedDate.date +"/"+ (fechaProximoControl.selectedDate.month+1) +"/"+ fechaProximoControl.selectedDate.fullYear;
					cc.hora	= horaProximoControl.text
					cc.servicio = "Policlínico";
					cc.usuario = responsableSeleccionado;
					
					var addControlService:AddControlService=new AddControlService();
					addControlService.addEventListener(ResultEvent.RESULT,addProxControlServiceResult);
					addControlService.addProxControl(cc);
																					
				}			
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion retorna el resultado de la accion que se realizo:Registro.		
			 * */
			private function addProxControlServiceResult(event:ResultEvent):void
			{
				var result:int = event.result as int ;
				if(!result>0)
					labelMessage.text = "Próximo control no registrado."
				else{
					labelMessage.text = "Próximo control registrado correctamente."
					Application.application.agenda2.iniciarAgenda();
					borrarDatosProximoControl();
				}	
			}
			
			
            /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que filtra las horas disponibles del Responsable
			 **/
			public function consultarHoras():void{
				if(fechaProximoControl.text != ""){
					var diaAgenda:DiaAgendaServices = new DiaAgendaServices();
					diaAgenda.addEventListener(ResultEvent.RESULT,consultarHorasDisponiblesResult);
					diaAgenda.getDiaAgenda(fechaProximoControl.selectedDate.date+"/"+(fechaProximoControl.selectedDate.month+1)+"/"+fechaProximoControl.selectedDate.fullYear);
				}
			}
			
			 /**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  27   Octubre
			 *  Funcion que filtra las horas disponibles del Responsable para el proximo control
			 **/
			private function consultarHorasDisponiblesResult(event:ResultEvent):void{
				var horas:ArrayCollection = new ArrayCollection();
                var horasOcupadas:ArrayCollection = new ArrayCollection();
                
                // retorno de todas las citas
				horas = event.result as ArrayCollection;
				
				for(var i:int=0; i< horas.length; i++){
					if(responsableSeleccionado == horas.getItemAt(i).responsable){
						horasOcupadas.addItem(horas.getItemAt(i).hora);
					}
				}
				
				// horas libres que posteriormente son llenadas si no hay choque de horas
				// con las horas ocupadas
				horasLibres  = new ArrayCollection();
				
				if(!horasOcupadas.contains("10:30")){horasLibres.addItem({label:"10:30"});}
				if(!horasOcupadas.contains("11:00")){horasLibres.addItem({label:"11:00"});}
				if(!horasOcupadas.contains("11:30")){horasLibres.addItem({label:"11:30"});}
				if(!horasOcupadas.contains("12:00")){horasLibres.addItem({label:"12:00"});}
				if(!horasOcupadas.contains("12:30")){horasLibres.addItem({label:"12:30"});}
				if(!horasOcupadas.contains("15:30")){horasLibres.addItem({label:"15:30"});}
				if(!horasOcupadas.contains("16:00")){horasLibres.addItem({label:"16:00"});}
				if(!horasOcupadas.contains("16:30")){horasLibres.addItem({label:"16:30"});}
				if(!horasOcupadas.contains("17:00")){horasLibres.addItem({label:"17:00"});}
				if(!horasOcupadas.contains("17:30")){horasLibres.addItem({label:"17:30"});}
				if(!horasOcupadas.contains("18:00")){horasLibres.addItem({label:"18:00"});}
				if(!horasOcupadas.contains("18:30")){horasLibres.addItem({label:"18:30"});}
				if(!horasOcupadas.contains("19:00")){horasLibres.addItem({label:"19:00"});}
				if(!horasOcupadas.contains("19:30")){horasLibres.addItem({label:"19:30"});}
				
				horaProximoControl.dataProvider = horasLibres;
			}
			
			/**
		 	* 	@author  "Sebastian Arancibia"
			* 	@Fecha  13 Octubre
			* Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido el resultado
			* de la comunicacion con la capa logica.
			* @param event Evento
			*/
	        private function ini():void{
	        	//datosMascota.visible = true;
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	        }
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  13 Octubre
			 * Funcion que busca un cliente, en la base de datos, para esto primero verifica 
			 * si el rut esta ingresado correctamente, en caso de estar incorrecto lo informa por pantalla.
			 * En caso contrario realiza las llamadas a la capa de java, la cual procesara la soliitud, y 
			 * retornara si el cliente existe o no.
			 * @param event Evento
			 */
        	private function buscarCliente(event:Event):void{
        		if(rutClienteDVInput.text == "k"){
        			rutClienteDVInput.text = "K";
        		}
        		
        		
        		if(rutClienteDVInput.text != "" && rutClienteInput.text != ""){
        			//ini();
        			var Numero:String = rutClienteInput.text;
        			var Dv:String = rutClienteDVInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
				
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
				
					Resto = 11-(suma%11);
					if(DigVer[Resto] != Dv.toUpperCase()){
						labelMessage.text = "El Rut que ha ingresado es incorrecto.";
						//currentState="BusquedaRut";
						datagrid1.dataProvider = "";
						
					}
					else{
						labelMessage.text = "";
						rutClienteInput.errorString = "";
						getCliente(rutClienteInput.text + rutClienteDVInput.text);
					}
        		}
        	}
        		
        	/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados.
			 */
        	private function getCliente(rutCliente:String):void{
				var addMascotaService:AddMascotaService = new AddMascotaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getClienteResult);
				addMascotaService.getCliente(rutCliente);
			}
			
			
			/**
		 	 * 	@author  "Sebastian Arancibia"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados. Se procesa el resultado del metodo 
			 * anterior.
			 * @param event Evento
			 */
			public function getClienteResult(event:ResultEvent):void{
				var nombreCliente:String = event.result as String;
				
				if(nombreCliente == null){
        			labelMessage.text = "Cliente no registrado."
        			//datagrid1.dataProvider = "";
        			mascotas.removeAll()
        			
        		}
        		else{
        			nombreClienteInput.text = nombreCliente;
        			labelMessage.text = "Se ha accedido al cliente " + nombreCliente;
        			ini();
        		}	
        	}
        	/**
			 * Funcion que consulta una accion realizada por el usuario
			 * dependiendo de cual sea se ocultaran o mostraran algunas opciones
			 */ 
			public function consultarAccion(event:Event):void{
				var selectedRow:Object = event.currentTarget.selectedItem;
				if(selectedRow.nombre != null){
					registrarNuevoControl.visible = true;	
				}
				else{
					registrarNuevoControl.visible = false;
				}	
			}
			/**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que inicializa los valores de los clientes del sistema, para seleccionarlo 
			 * ingresando su apellido. Llamando a la funcion de BusquedaService.
			 */
		   public function getAllClientes():void
		   {
	   			this.labelMessage.text="";
	   			var busquedaService:BusquedaService = new BusquedaService();
	   			busquedaService.addEventListener(ResultEvent.RESULT,getAllClientesResult);
				busquedaService.getAllClientes();
		   

		   		
		   }
		   
		   /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que almacena el resultado del metodo anterior en el arraycollection cliente2.
			* Y llama a la funcion concatena.
			*/
		   public function getAllClientesResult(event:ResultEvent):void
		   {
		   		cliente2 = event.result as ArrayCollection;
		   		concatena();
		   }
		   
		   /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que busca al cliente, al momento de soltar el autocomplete del apellido, 
			 * procesando los datos, partiendo el texto, y guardandolo en el nombreN, apellidomN
			 * y en apellidopN.
			 */
		   public function buscarCliente2():void
		   {
		   		this.labelMessage.text="";
		   		var nombre:String = nombreClienteInput.text;
		   		if(nombreClienteInput.text != ""){
		   			var largo:int = cliente2.length;
		   			var i:int;
		   			var sss:Array;
		   			
		   			sss = nombreClienteInput.text.split(" ",3);

		   			
		   			/**
		   			 * obtiene los datos de la division del nombre seleccionado.
			 		*/
		   			var nombreN:String = sss.pop();
		   			var apellidomN:String = sss.pop();
		   			var apellidopN:String = sss.pop();
		   			
		   			/**
		   			 * Compara los datos obtenidos de la division, con los que se 
		   			 * encuentran en el arreglo de clientes.
			 		*/
		   			for(i=0;i<largo;i++){
		   				var newCli:Cliente = cliente2.getItemAt(i,0) as Cliente;
		   				if(nombreN == newCli.nombre && apellidopN == newCli.apellido && apellidomN == newCli.apellido2){
		   					this.rutClienteInput.text=newCli.rut.substring(0,8);
		   					labelMessage.text = "Se ha accedido al cliente "+newCli.nombre;
		   					sacaDigito();
		   					ini();
		   					break;
		   				}

		   			}
		   		}
		   }
		   /**
		   	*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
		   	* Función para obtener el dígito verificador, y para guardarlo en 
		   	* el input dedicado a almacenar esa variable.
			*/
		   private function sacaDigito():void{        			
        			
        			var Numero:String = rutClienteInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
					
					Resto = 11-(suma%11);
					if(Resto == 10){
						this.rutClienteDVInput.text="K";	
					}
					else{
						this.rutClienteDVInput.text=""+Resto;	
					}
					
        		
     		}

     		 /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
			*/
		   public function concatena():void
		   {
		   		clientes = new ArrayCollection();
		   		var i:int;
		   		var max:int = cliente2.length;
		   		
		   		for(i=0;i<max;i++){
		   			var cli:Cliente = cliente2.getItemAt(i,0) as Cliente;
		   			var cli2:Cliente = new Cliente();
		   			cli2.nombre = ""+cli.apellido+" "+cli.apellido2+" "+cli.nombre;
		   			clientes.addItem(cli2);
		   		}
		   		clientes.refresh();
		   }
		   /**
			*   @author  "Sebastian Arancibia"
			* 	@Fecha  02 Noviembre
			* Metodo que formatea el costo de la atencion
			*/
		   public function formatear():void
		   {
		   		costoFinal = costo.text;
		   		costo.text = "$"+makeNumberFormat(costo.text, ".");
		   }
		   
			
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="BusquedaRut">
		</mx:State>
		<mx:State name="NuevoControl">
			<mx:AddChild position="lastChild">
				<mx:ComboBox id="horaProximoControl" x="482" y="225" width="160" dataProvider="{horasLibres}"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="56" y="104" text="Actual Control" fontWeight="bold" id="label7"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="104" text="Próximo Control" fontWeight="bold" id="label10"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="56" y="140" text="Descripción:" width="84" id="label8"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="183" text="Fecha:" width="52" id="label9"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="225" text="Hora:" width="52" id="label11"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Label x="395" y="138" text="Responsable:" width="97" id="label12"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextArea x="143" y="139" width="169" height="66" id="descripcion"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DateField id="fechaProximoControl" x="484" y="183" width="158" formatString="DD/MM/YYYY" change="consultarHoras()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:CheckBox id="altaMedicaBox" x="143" y="264" label="Próximo control" change="altaMedica()" selected="true"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:ComboBox id="responsable" x="482" y="136" dataProvider="{usuarios2}" close="asignarResponsable(event)"></mx:ComboBox>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="549" y="320" label="Registrar" visible="true" id="registrar" click="registrarControl()"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="636" y="320" label="Cancelar" width="84" id="cancelar" visible="true" click="buscarPorRut()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label1}" position="before">
				<mx:Label x="393" y="42" text="Nombre:" width="64" id="label6"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="478" y="42" id="nombreMascota"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label14}"/>
			<mx:SetProperty target="{label0}" name="x" value="56"/>
			<mx:RemoveChild target="{label1}"/>
			<mx:SetProperty target="{rutClienteDVInput}" name="x" value="279.5"/>
			<mx:SetProperty target="{rutClienteDVInput}" name="y" value="42"/>
			<mx:SetProperty target="{rutClienteInput}" name="x" value="141"/>
			<mx:SetProperty target="{rutClienteInput}" name="y" value="42"/>
			<mx:SetProperty target="{label3}" name="x" value="268.5"/>
			<mx:SetProperty target="{label3}" name="y" value="44"/>
			<mx:SetProperty target="{label4}" name="x" value="56"/>
			<mx:SetProperty target="{label4}" name="y" value="42"/>
			<mx:AddChild relativeTo="{label4}" position="before">
				<mx:Label x="393" y="10" text="Mascota" fontWeight="bold" id="label2"/>
			</mx:AddChild>
			<mx:RemoveChild target="{datagrid1}"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:RemoveChild target="{registrarNuevoControl}"/>
			<mx:RemoveChild target="{nombreClienteInput}"/>
			<mx:AddChild position="lastChild">
				<mx:TextInput x="143" y="223" width="169" id="costo" maxChars="8" restrict="0-9" focusOut="formatear()" focusIn="costo.text = new String()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{label9}" position="before">
				<mx:Label x="56" y="225" text="Costo:" width="49" id="label15"/>
			</mx:AddChild>
			<mx:RemoveChild target="{label5}"/>
		</mx:State>
	</mx:states>
	<mx:Label x="24" y="10" text="Cliente" fontWeight="bold" id="label1"/>
	<mx:Label x="24" y="10" text="Cliente" fontWeight="bold" id="label0"/>
	<mx:Label x="24" y="75" text="Mascotas" fontWeight="bold" id="label5"/>
	<mx:Label x="337" y="38" text="Rut:" width="37" id="label4" height="20"/>
	<mx:Label x="509.5" y="40" text="-" width="14.75" textAlign="center" id="label3"/>
	<mx:TextInput  restrict="0-9" x="382" y="38" width="130.5" id="rutClienteInput" maxChars="8" focusOut="buscarCliente(event)"/>
	<mx:TextInput x="520.5" y="38" width="19.5" id="rutClienteDVInput" maxChars="1" restrict="K k 0-9" focusOut="buscarCliente(event)"/>
	<mx:Label x="167" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="24" y="40" text="Apellido:" width="84" id="label14"/>
	<mx:DataGrid color="0x323232" width="709" rowCount="3" y="96" x="25" variableRowHeight="true" height="251" doubleClickEnabled="true" id="datagrid1" selectable="true" itemDoubleClick="nuevoControl()" itemClick="consultarAccion(event)" dataProvider="{mascotas}">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="659" y="355" label="Cancelar" id="button1" click="volver()"/>
	<mx:Button x="572" y="355" label="Visualizar" id="registrarNuevoControl" visible="false" click="nuevoControl()"/>
	<ns1:AutoComplete id="nombreClienteInput" x="84" y="38" width="210" dataProvider="{clientes}" labelField="nombre" click="getAllClientes()" focusOut="buscarCliente2()"/>
	
</mx:Panel>