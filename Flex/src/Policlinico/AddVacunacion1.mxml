<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registro Vacunación" xmlns:fc="http://www.adobe.com/2006/fc" xmlns:ns1="util.*">
	<mx:Script>
        <![CDATA[
           	//=======================================================================
			// FECHA: CREACIÓN: 27/10/09
			// AUTOR: jimmy muñoz
			// Panel de selección de usuario, para proceder a editar los datos de éste.
			//=======================================================================
			import util.Properties;
        	import mx.events.FlexEvent;
        	import transferObjects.ConfiguracionVacuna;
        	import transferObjects.Cliente;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
            import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
		    import flash.events.*;
		    import mx.rpc.events.ResultEvent;
		    import mx.core.Application;
		    import transferObjects.Person;
		    import services.BusquedaService;
		    import services.configuracionServices;
			import services.Validacion;
			
			[Bindable]
		    public var clienteBD:Cliente;
		    [Bindable]
		    public var tiposV:ArrayCollection;
		    [Bindable]
		    public var vetesV:ArrayCollection;
		    [Bindable]
		    public var ayudantesV:ArrayCollection;
		    [Bindable]
			private var clientesV:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cliente2V:ArrayCollection;
			[Bindable]
			public var editaV:Boolean;
			[Bindable]
			public var rutEnvi:String ="";
		    [Bindable]
			public var nomEnvi:String ="";
			
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		      
		   [Bindable]private var vacunas:ArrayCollection;
			private var confs:configuracionServices= new configuracionServices();

			
			/**
		 	* Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido el resultado
			* de la comunicacion con la capa logica.
			 * @author  "Jimmy Muñoz"
			* @param event Evento
			*/
	        private function ini():void{
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	        }
	         
        	
        					
					
			/**
		 	* Metodo que realiza la comunicacion a la capa logica a traves de AddVacunaService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente.
			 * @author  "Jimmy Muñoz"
			*/
			private function getMascotas():void{
				var addvacService:AddVacunacionService = new AddVacunacionService();
				addvacService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addvacService.getMascotas(nombRutInput.rutClienteInput.text);
			}
			
			/**
		 	* Metodo que realiza la comunicacion a la capa logica a traves de AddVacunacionService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente. 
			 * Se almacena el resultado del metodo anterior en la variable mascotas.
			 * @author  "Jimmy Muñoz"
			* @param event Evento
			*/
			private function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			
			/**
		 	* Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			* veterinarios esto lo hace a traves de la clase AddVacunacionService. 
			 * @author  "Jimmy Muñoz"
			*/
			private function getTiposVeterinarios():void
			{
				var addvacService:AddVacunacionService = new AddVacunacionService();
				addvacService.addEventListener(ResultEvent.RESULT,getTiposV);
				addvacService.getTiposVeterinarios();
			}
			
			/**
		 	* Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			* variable vetesC. Que corresponde a la lista veterinarios que existen en el sistema.
			 * @author  "Jimmy Muñoz"
			* @param event Evento
			*/
			private function getTiposV(event:ResultEvent):void
			{
				vetesV = event.result as ArrayCollection;
			}
			
			
			/**
		 	* Metodo que procesa los datos ingresados en este panel, y muestra el panel 
			* en donde se realiza el registro de vacuna, cargando los datos correspondientes, 
			* para que el otro panel posea todos los datos.
			 * @author  "Jimmy Muñoz"
			*/
			private function regVacu():void
			{
				/**
				 * Si se selecciono un item del datagrid se realiza la acción.
				 */
				if(dg.selectedItem){
					var nuevavac:AddVacunacion = Application.application.addVacuna;
					nuevavac.iniciarPanel();
					this.labelMessage.text="";
					var listCont2:Array = new Array();
					listCont2 = dg.selectedItem.nombre.split(" ",1);
					var nombre:String = listCont2.pop();
					nuevavac.nombreMascota=nombre;
					nuevavac.nombMasc.text=nombre;
					nuevavac.clienteRut=this.nombRutInput.rutClienteInput.text;
					nuevavac.clienteRut2=this.nombRutInput.rutClienteDVInput.text;
					nuevavac.veterinarios2=this.vetesV;
					nuevavac.ayudantes2=this.ayudantesV;
					nuevavac.ayudantes3=this.ayudantesV;
										
					var i:int;
					var large:int = vacunas.length;
					
					for(i=0;i<large;i++){
						var vac:ConfiguracionVacuna = this.vacunas.getItemAt(i,0) as ConfiguracionVacuna;
						var text2:String = vac.nombre;

						nuevavac.tiposVac1.push(text2);
					}
					
					this.setVisible(false,false);
					nuevavac.setVisible(true,false);
				}
				else{
					this.labelMessage.text=Properties.getMensaje("Advertencia", "38");
				}
				
			}
			
			/**
		 	* Metodo que inicializa todos los valores y variables de este panel.
		 	 * @author  "Jimmy Muñoz"
			*/
			public function iniciarPanel():void
			{
				/*this.clientesV = new ArrayCollection();
				this.cliente2V = new ArrayCollection();
				this.nomEnvi="";
				this.rutEnvi="";
				editaV=false;
				editaV=true;*/
				
				this.nombRutInput.getAllClientes();
				this.nombRutInput.inputClienteNombre.text="";
				this.nombRutInput.inputClienteNombre.typedText="";
				this.nombRutInput.rutClienteInput.text="";
				this.nombRutInput.rutClienteDVInput.text="";	
				
				this.cargarDatos();
				this.getTiposVeterinarios();
				this.mascotas=new ArrayCollection();
				this.dg.doubleClickEnabled=true;
				this.labelMessage.text="";			
			}
			
			/**
		 	* Metodo que inicializa los valores de los tipos de vacunas, veterinarios y ayudantes.
		 	 * @author  "Jimmy Muñoz"
			*/
			public function iniciarPanel1():void
			{
				this.getTiposVeterinarios();
				cargarDatos();
			}
			
			
			
			
		   
		   /**
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
			 * @author  "Jimmy Muñoz"
			*/
		   private function concatenaV():void
		   {
		   		
		   		var i:int;
		   		var max:int = cliente2V.length;
		   		var cli:Cliente;
		   		var cli2:Cliente;
		   		
		   		
		   		for(i=0;i<max;i++){
		   			cli= cliente2V.getItemAt(i,0) as Cliente;
		   			cli2 = new Cliente();
		   			cli2.nombre = ""+cli.apellido+" "+cli.apellido2+" "+cli.nombre;
		   			clientesV.addItem(cli2);
		   		}
		   		
		   }
		   
		   /**
			*  Metodo que busca al cliente, al momento de soltar el autocomplete del apellido, 
			 * procesando los datos, partiendo el texto, y guardandolo en el nombreN, apellidomN
			 * y en apellidopN.
			 * @author  "Jimmy Muñoz"@author  "Jimmy Muñoz"
			 */
		   private function buscarCliente2():void
		   {
		   	  if(this.nomEnvi != this.nombRutInput.inputClienteNombre.text){
		   		dg.setFocus();
		   		this.labelMessage.text="";
		   		var nombre:String = nombRutInput.inputClienteNombre.text;
		   		if(nombRutInput.inputClienteNombre.text != ""){
		   			var largo:int = cliente2V.length;
		   			var i:int;
		   			var sss:Array;
		   			
		   			sss = nombRutInput.inputClienteNombre.text.split(" ",3);

		   			
		   			/**
		   			 * obtiene los datos de la division del nombre seleccionado.
			 		*/
		   			var nombreN:String = sss.pop();
		   			var apellidomN:String = sss.pop();
		   			var apellidopN:String = sss.pop();
		   			
		   			/**
		   			 * Compara los datos obtenidos de la division, con los que se 
		   			 * encuentran en el arreglo de clientes.
			 		*/
		   			for(i=0;i<largo;i++){
		   				var newCli:Cliente = cliente2V.getItemAt(i,0) as Cliente;
		   				if(nombreN == newCli.nombre && apellidopN == newCli.apellido && apellidomN == newCli.apellido2){
		   					this.nombRutInput.rutClienteInput.text=newCli.rut.substring(0,8);
		   					labelMessage.text = "Se ha accedido al cliente "+newCli.nombre;
		   					this.nomEnvi = this.nombRutInput.inputClienteNombre.text;
        					this.rutEnvi = this.nombRutInput.rutClienteInput.text;
		   					sacaDigito();
		   					ini();
		   					break;
		   				}

		   			}
		   			this.nombRutInput.inputClienteNombre.text=this.nomEnvi;
		   			this.nombRutInput.rutClienteInput.text=this.rutEnvi;
		   		}
		   	  }
		 
		   }
		   
		   
		   /**
		   	*  Función para obtener el dígito verificador, y para guardarlo en 
		   	* el input dedicado a almacenar esa variable.
		   	 * @author  "Jimmy Muñoz"
			*/
		   private function sacaDigito():void{        			
        			
        			var Numero:String = nombRutInput.rutClienteInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
					
					Resto = 11-(suma%11);
					if(Resto == 10){
						this.nombRutInput.rutClienteDVInput.text="K";	
					}
					else{
						if(Resto == 11){
							this.nombRutInput.rutClienteDVInput.text="0";	
						}
						else{
							this.nombRutInput.rutClienteDVInput.text=""+Resto;
						}
							
					}
					
        		
     		}
     		
     		/**
		   	*  Metodo que obtiene las vacunas desde la base de datos. Desde la clase configuracionServices.
		   	 * @author  "Jimmy Muñoz"
			*/
     		private function cargarDatos():void
     		{ 
     			confs.getConfiguracioneVacunas();
     			confs.addEventListener(ResultEvent.RESULT,cargarDatosR);
     		} 
     		
     		/**
		   	* Metodo que obtiene obtiene el resultado del metodo anterior, que son las vacunas 
		   	 * que se han registrado en el sistema.
		   	 * @author  "Jimmy Muñoz"
			*/
     		private function cargarDatosR(event:ResultEvent):void
     		{
     			vacunas = event.result as ArrayCollection; 
     		}
     		
     		/**
		   	* Metodo que retorna al panel principal de clinica.
		   	 * @author  "Jimmy Muñoz"
			*/
     		private function vuelve():void
     		{
     			this.setVisible(false,false);
     			Application.application.panelClinicaPrincipal.setVisible(true,false);
     		}
			
			/**
		   	* Metodo que permite, que la busqueda se realice mediante el ingreso del apellido.
		   	 * @author  "Jimmy Muñoz"
			*/
			private function permite():void
     		{
     			editaV = true;
     		}
     		
     		
     		/**
		   	* Metodo que quita el focus al rut o al nombre.
		   	 * @author  "Jimmy Muñoz"
			*/
     		private function focusSale():void
     		{
     			dg.setFocus();

     		}
     		
     		
        ]]>
    </mx:Script>
	
	<ns1:BuscadorNombreRut x="25" y="36" id="nombRutInput"  keyFocusChange="getMascotas()" mouseFocusChange="getMascotas()">
	</ns1:BuscadorNombreRut>
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente:" width="84.75" fontWeight="bold"/>
	<mx:DataGrid id="dg" color="0x323232" width="710" rowCount="3" y="92" x="25" variableRowHeight="true" dataProvider="{mascotas}" itemDoubleClick="{regVacu()}"  visible="true" height="244">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="522" y="353" label="Visualizar" visible="true" id="registrar" click="{regVacu()}" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Volver" width="103" id="cancelar" visible="true" height="23" click="{vuelve()}"/>
	
	<mx:Label x="25" y="65" text="Mascotas:" width="112.75" fontWeight="bold"/>
	
	
	
</mx:Panel>
