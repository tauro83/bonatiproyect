<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registrar Vacunación" xmlns:ns1="*">
	<mx:Script>
        <![CDATA[
        	import mx.collections.Sort;
        	import transferObjects.tiposCir;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
        	import mx.controls.Alert;
            import mx.collections.ArrayCollection;
        	import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
  			import flash.display.Sprite;
		    import flash.events.*;
		    import flash.net.FileReference;
		    import flash.net.FileReferenceList;
		    import mx.rpc.events.ResultEvent;

			import mx.controls.Image;
		    import transferObjects.Cirugia;
		    import mx.core.Application;
		    
		    import transferObjects.Person;
		    import pabellon.addCirugia;
		    import pabellon.addCirugia1;
		    import pabellon.AddCirugiaService;
		    
		   
			[Bindable]
			public var clienteRut:String;
			[Bindable]
			public var clienteRut2:String;
			[Bindable]
			public var nombreMascota:String;
			[Bindable]
			public var hora:String;
			[Bindable]
			public var veterinarios2:ArrayCollection;
			[Bindable]
			public var ayudantes2:ArrayCollection;
			[Bindable]
			public var ayudantes3:ArrayCollection;
			[Bindable]
			public var tiposCir1:Array;
			[Bindable]
			public var tiposCir2:Array;
			[Bindable]
			public var cirugsAdds:Array;
		   
		   
		   /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de volver al panel anterior, dejando invisible este
			 * y dejando visible el anterior.		 		
			 * */ 
		    public function vuelve():void
		    {
		    	this.setVisible(false,false);
		    	Application.application.addCirug.labelMessage.text="";
		    	Application.application.addCirug.iniciarPanel1();
		    	Application.application.addCirug.setVisible(true,false);
		    }
		    
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de verificar que todos los datos esten correctamente
			 * ingresados en los inputs correspondientes, para que no se guarde una cirugia con datos erroneos.
			 * En caso de que se produsca algun error o que falten datos se mostrara por pantalla los mensajes 
			 * informando de cuales datos faltan por ingresar.		 		
			 * */ 
		    public function registrarCiru():void{
		    	
		    	if(this.veterinariosC.text==""){
		    		this.labelMessage.text="Seleccione el nombre de un Veterinario para la cirugía.";
		    	}
		    	else{
		    		if(this.costoC.text==""){
		    			this.labelMessage.text="Ingrese un costo para la cirugía.";
		    		}
		    		else{
		    			if(this.fechaC.text==""){
		    				this.labelMessage.text="Seleccione una fecha para la cirugía.";
		    			}
		    			else{
		    				if(this.cirugsAdds.length==0){
		    					this.labelMessage.text="Añada un tipo de cirugía que se haya realizado a la mascota.";
		    				}
		    				else{
		    					this.labelMessage.text="";
		    					var newVacuna:Cirugia = new Cirugia();
		    	
		    					newVacuna.veterinario= this.veterinariosC.text;
		    					newVacuna.costo = this.costoC.text;
		    					newVacuna.fecha = this.fechaC.text;
		    					var i:int;
		    					var largo:int = this.cirugsAdds.length;
		    					newVacuna.tiposCirugias = new ArrayCollection();
		    					for(i=0;i<largo;i++){
		    						newVacuna.tiposCirugias.addItem(cirugsAdds.pop());
		    					}
		    							
		    					newVacuna.clienteRut = this.clienteRut;
		    					newVacuna.clienteRut2 = this.clienteRut2;
		    					newVacuna.mascotaNombre = this.nombreMascota;
		    							
		    					var newAddServ:AddVacunacionService = new AddVacunacionService();
		    					newAddServ.addVacuna(newVacuna);
		    					this.setVisible(false,false);
		    					Application.application.addCirug.iniciarPanel1();
		    					Application.application.addCirug.labelMessage.text="Vacuna Registrada con exito.";
		    					Application.application.addCirug.setVisible(true,false);
		    				}
		    					
		    			}
		    		}
		    		
		    	}
		    	
		    	
		    }
		    
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de quitar una cirugia de la lista de cirugias realizadas
			 * representada por la lista cirugsAdds y volviendo a colocarla disponible en la lista de cirugias.
			 * */ 
		     public function quitaCir():void
		    {
		    	
		    	if(tabCirs.selectedItem){
		    		var s:String = tabCirs.selectedItem.toString();		    		
		    		tiposCir1.push(s);
		    		ordenar();
					renombrarCir2(s);
		    	}
		    	else{
		    		this.labelMessage.text="Seleccione una cirugía de la tabla Cirugías realizadas.";
		    	}
	
		    }
		    
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de quitar una cirugia de la lista de cirugias realizadas
			 * representada por la lista cirugsAdds y volviendo a colocarla disponible en la lista de cirugias. 
			 * Esto lo hace comparando las cirugias con el nombre, y luego cuando encuentra la corecta la añade.
			 *  @Param String representando el nombre del tipo de cirugia.
			 * */ 
		    public function renombrarCir2(texto:String):void{
		    	var newAr:Array = this.cirugsAdds;
		    	cirugsAdds = new Array();
		    	var i:int;
		    	var j:int = newAr.length;
		    	for(i=0;i<j;i++){
		    		var s:String = newAr.pop();
		    		if(s!=texto){
		    			cirugsAdds.push(s);
		    		}
		    	}
		    	this.ordenar2();

		    	
		    }
		    
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de agregar una cirugia de la lista de cirugias(tiposCir1) a la de 
			 * cirugias realizadas (cirugsAdds), representada por la lista cirugsAdds y volviendo a colocarla disponible en la lista de cirugias.
			 * */ 
		    public function guardaCir():void
		    {
		    	
		    	if(cirugias1.selectedItem){
		    		var s:String = cirugias1.selectedItem.toString();		    		
		    		cirugsAdds.push(s);
		    		ordenar2();
					renombrarCir(s);
		    	}
		    	else{
		    		this.labelMessage.text="Seleccione una cirugía de la tabla Cirugías.";
		    	}
		    	
				
		    }
         
         
		    
         	
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de agregar una cirugia de la lista de cirugias(tiposCir1) a la de 
			 * cirugias realizadas (cirugsAdds), representada por la lista cirugsAdds y volviendo a colocarla disponible en 
			 * la lista de cirugias. Esto lo hace comparando las cirugias con el nombre, y luego cuando encuentra la corecta la añade.
			 *  @Param String representando el nombre del tipo de cirugia.
			 * */ 
		    public function renombrarCir(texto:String):void{
		    	var newAr:Array = this.tiposCir1;
		    	tiposCir1 = new Array();
		    	var i:int;
		    	var j:int = newAr.length;
		    	for(i=0;i<j;i++){
		    		var s:String = newAr.pop();
		    		if(s!=texto){
		    			tiposCir1.push(s);
		    		}
		    	}
		    	this.ordenar();
		    	
            	

		    }
		    
		    private function ordenLetra (a : Object , b : Object , fields : Array = null) : int
		    {

            	if (a > b)
            	{
               		return 1;
            	}
            	else if (a< b)
            	{
               		return -1;   
            	}
            	else {
               		return 0;
            	}
         	} 
		    
		    private function ordenar () : void
         	{

           		var sort : Sort = new Sort ()
            	sort.compareFunction = ordenLetra;
            	cirugias1.dataProvider.sort = sort;
            	cirugias1.dataProvider.refresh ();
         	}
         	
         	private function ordenar2 () : void
         	{

           		var sort : Sort = new Sort ()
            	sort.compareFunction = ordenLetra;
            	tabCirs.dataProvider.sort = sort;
            	tabCirs.dataProvider.refresh ();
         	}
		    
		    

		    
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que realiza la accion de deshabilitar la seleccion de un nombre de veterinario
			 * para que pueda ser seleccionado como ayudante, pues no puede ser veterinario y a la vez ayudante,
			 * debe tener un ayudante diferente.
			 * */ 
		    public function renombrarAyu():void
		    {
		    	var texto:String=veterinariosC.selectedLabel;
		    	if(texto!=""){
		    		ayudantes2 = new ArrayCollection();
		    		var i:int;
		    		var j:int = ayudantes3.length;
		    		for(i=0;i<j;i++){
		    			var s:String = ayudantes3.getItemAt(i,0).toString();
		    			if(s!=texto){
		    				ayudantes2.addItem(s);
		    			}
		    		}
		    	}

		    }
		    
		   
		    /**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  27 Octubre
			 *  @Descripcion Metodo que inicializa todos los datos del panel para que 
			 * no existan datos de registros anteriores.
			 * */ 
		    public function iniciarPanel():void
		    {
		    	this.costoC.text="";
		    	this.fechaC.text="";
		    	this.cirugias1.doubleClickEnabled=true;
		    	this.tiposCir2 = new Array();
		    	this.tiposCir1 = new Array();
		    	this.ayudantes2 = new ArrayCollection();
		    	this.ayudantes3 = new ArrayCollection();
		    	this.veterinarios2 =new ArrayCollection();
		    	this.cirugsAdds =new Array();


		    }
				
        ]]>
    </mx:Script>
	<mx:Label x="25" y="10" text="Vacuna:" width="110" fontWeight="bold"/>
	<mx:Label x="25" y="173" text="Vacunas:" width="63.4" height="17.931034"/>
	<mx:Label x="25" y="35" text="Responsable:" width="85.45"/>
	<mx:Label x="450.55" y="35" text="Caducidad:" width="78"/>
	<mx:Label x="450.55" y="75" text="Costo:" width="63.4"/>
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	
	<mx:ComboBox x="118.4" y="33" id="veterinariosC" dataProvider="{veterinarios2}" width="190.25" close="renombrarAyu()"></mx:ComboBox>
	<mx:DateField x="536.55" y="35" width="120.25" id="fechaC"/>
	<mx:TextInput x="536.55" y="75" width="104" id="costoC" restrict="0-9"/>
	
	<mx:Button x="397.25" y="216" label="-&gt;" width="47.55" click="guardaCir()"/>
	<mx:Button x="397.25" y="246" label="&lt;-" width="47.55" click="quitaCir()"/>

	<mx:Button x="522" y="353" label="Registrar" visible="true" id="registrar" click="registrarCiru()" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Cancelar" id="cancelar" visible="true" click="vuelve()" width="102" height="23"/>
	<mx:List x="119.5" y="170" width="270" height="175" id="cirugias1" dataProvider="{tiposCir1}"></mx:List>
	<mx:List x="452.8" y="170" width="282.65" height="175" id="tabCirs" dataProvider="{cirugsAdds}"></mx:List>
	<mx:Label x="450.55" y="115" text="Mascota:" width="63.95"/>
	<mx:TextInput x="536.55" y="115" width="104" id="nombMasc" editable="false"/>
	<mx:Label x="25" y="75" text="Descripción:" width="86"/>
	<mx:TextArea x="119.5" y="73" width="271.6" height="89" id="descripcionV"/>
	
	
</mx:Panel>