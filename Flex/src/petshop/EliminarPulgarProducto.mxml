<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" xmlns:ns1="util.*" title="Eliminar Producto">
	
	<mx:Script>
		<![CDATA[
		
		//=======================================================================
			// FECHA: CREACIÓN: 23 Noviembre
			// AUTOR: Raúl López
			// Panel en donde se despliegan los clientes activos del sistema, de modo de 
			//poder seleccionar los productos que se deseen eliminar
			//=======================================================================

		
		
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import transferObjects.Cliente; 
			import mx.rpc.events.ResultEvent;
			import mx.events.CloseEvent;
			import mx.core.Application;
			 
			import flash.events.MouseEvent;
            import mx.events.FlexEvent;
            import mx.controls.CheckBox;
			import mx.rpc.events.FaultEvent;
			import PurgarCliente;
			import services.BusquedaService;
			import mx.events.DropdownEvent;
			
			import petshop.PetshopService;
			
			[Bindable]
			private var productos:ArrayCollection;
			import services.PersonService;
			
			
			/**
	 		*  Metodo que llama al service de petshop, en la cual se  obtienen todos los productos
	 		*  que estan a disposición en la veterinaria.
	 		 * @author "Raúl López"
	 		**/ 	
			
		    public function getProductosActivos():void{
		   		var pro:PetshopService = new PetshopService();
		   		pro.addEventListener(ResultEvent.RESULT,getProductosActivosResult);
				//busquedaService.getAllClientes();
		   }
		   
		   /**
		 	 * 	Metodo que El resultado de la llamada en el metodo anterior, a las clases de java
			 * es recibido en este metodo y almacenado en un ArrayCollection, el cual sera el dataProvider 
			 * del datagrid, para mostrar los datos de los productos que existen en el sistema.	 
			 * @author  "Raúl López"		
			 * */
		   
		   public function getProductosActivosResult(event:ResultEvent):void
		   {
		   		productos = event.result as ArrayCollection;
		   }
		   
		   
			/**
	 		*  Metodo que se comunica primeramente con el service, el se comunica con la base datos
	 		*  en donde se indica el código del producto, con lo cual se procede a eliminarlo de la base de datos
	 		 * @author "Raúl López"
	 		**/ 
		   
		   private function EliminaProducto(rut:String):void
			{
				var proEliminadoService:EliminarProductoService=new EliminarProductoService();
				proEliminadoService.addEventListener(ResultEvent.RESULT,ProductoEliminadoResult);
				//proEliminadoService.eliminarProducto(codigo);
			}
		   
		   /**
		 	 * 	Metodo que El resultado de la llamada en el metodo anterior, a las clases de java
			 * es recibido en este metodo y almacenado en un ArrayCollection, el cual sera el dataProvider 
			 * del datagrid, para mostrar los datos de los productos que existen en el sistema.	 
			 * @author  "Raúl López"		
			 * */
		   private function ProductoEliminadoResult(event:ResultEvent):void
			{
				var result:int = event.result as int ;
				if(result>0)
				{
				   labelMessage.text = "Producto eliminado";
				}
				Application.application.setFocus();
				
			}
			
			/**
          * @Fecha  03 Octubre
          *@Descripcion Funcion que activa o desactiva el boton "Eliminar" cuando es seleccionado uno o mas productos
          ***/
             
            private function Activar():void{
            	var allRows:int = productos.length;
            	var seleccion:Boolean=false;
            	for (var i:int = 0; i < allRows; i++){
            		if(productos[i].sel)
            		seleccion=true;
            	}
            	
            }
            	
			private function eliminarPro(codigo:String):void
			{
				var proservice:EliminarProductoService=new EliminarProductoService();
				proservice.addEventListener(ResultEvent.RESULT,ProductoEliminadoResult);
				proservice.eliminarProducto(codigo);
			}
	
	
		]]> 
  	</mx:Script>	
	
	
	<mx:states>
		<mx:State name="PurgarRestaurar">
			<mx:RemoveChild target="{eliminarCliente}"/>
			<mx:AddChild position="lastChild">
				<mx:Button x="601" y="369" enabled="false" label="Purgar" id="purgarCliente" toolTip="Cuidado!!, esto eliminara los clientes seleccionados para siempre"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button x="511" y="369" enabled="false" id="reactivarCliente" label="Reactivar"  width="82"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Label x="169" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Button x="577" y="369" enabled="false" label="Eliminar" id="eliminarCliente"  toolTip="Elimina el o los clientes seleccionados"/>
	<mx:Button x="674" y="369" label="Cancelar" id="cancelar"/>
	<mx:CheckBox x="20.5" y="78" id="todo"/>
	<mx:Label x="42.5" y="78" text="Seleccionar todo"/>
	<mx:DataGrid x="20.5" y="114" width="718" height="244">
		<mx:columns>
		<mx:DataGridColumn width="20" headerText="" dataField="checkbox" id="checkbox" >
			 	<mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox click="data.sel=!data.sel"  selected="{data.sel}"/>            
                        </mx:Component>
             	</mx:itemRenderer>
            </mx:DataGridColumn>
			<mx:DataGridColumn headerText="Código" dataField="codigo" width="80"/>
			<mx:DataGridColumn headerText="Nombre" dataField="nombre" width="120"/>
			<mx:DataGridColumn headerText="Descripción" dataField="descripcion" />
			<mx:DataGridColumn headerText="Cantidad" dataField="cantidad" width="70"/>
			<mx:DataGridColumn headerText="Subtotal" dataField="subtotal" width="70"/>
		</mx:columns>
	</mx:DataGrid>
	<ns1:BuscadorNombreRut x="20.5" y="29" width="718">
	</ns1:BuscadorNombreRut>
	
</mx:Panel>
