<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" title="Registro Mascota" xmlns:ns1="components.*" borderColor="#15AD8F" xmlns:ns2="util.*">     
    <mx:Script>
        <![CDATA[
        	import services.AddMascotaService;
        	import mx.controls.DateField;
        	import mx.controls.Alert;
            import mx.collections.ArrayCollection;
        	import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
  			import flash.display.Sprite;
		    import flash.events.*;
		    import flash.net.FileReference;
		    import flash.net.FileReferenceList;
		    import mx.rpc.events.ResultEvent;
			import mx.controls.Image;
			import services.MascotaService;
		    import transferObjects.Mascota;
		    import services.PersonService;
		    import transferObjects.Person;
		    import mx.core.Application;
		    import services.configuracionServices;
		    
		    import util.Properties;
		   
			
			[Bindable]
			private var files:ArrayCollection=new ArrayCollection();
		    private var vResult:ValidationResultEvent;
		    
		    [Bindable] private var especies:ArrayCollection = new ArrayCollection();
		    [Bindable] private var razas:ArrayCollection = new ArrayCollection();
		    
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		    
		    /**
			* Opciones de seleccion para sexo de la mascota
			*/
		    [Bindable]
            public var sexos:ArrayCollection = new ArrayCollection(
                [ {label:" ", data:0},
                  {label:"Macho", data:1}, 
                  {label:"Hembra", data:2} ]);    


			/**
			* Funcion que busca un cliente
			* @author  Sebastian Arancibia
			* @param event Evento proveniente al realizar la accion
			*/
        	private function buscarCliente(event:Event):void{
        		ini(event);
				getCliente(buscadorCliente.rutClienteInput.text + buscadorCliente.rutClienteDVInput.text);	
        	}
        	
			/**
			* Funcion que inicia el panel y llena la tabla de mascotas asociadas al cliente
			* @param event Evento
			* @author  Sebastian Arancibia
			*/
	        private function ini(event:Event):void{
	        	datosMascota.visible = true;
	        	selClaseAnimal(event);
	        	
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	         }

        	private function alertClickHandler(event:CloseEvent):void {
            	if (event.detail==Alert.YES)
                	buscadorCliente.rutClienteInput.visible=false;
            	else
                	buscadorCliente.rutClienteInput.visible=true;
        	}
        	
        	/**
			* Funcion que llena las opciones de razas segun la clase de animal seleccionada
			* @param event Evento
			* @author  Sebastian Arancibia
			*/
        	private function selRazas(event:Event):void {
				var confs2:configuracionServices= new configuracionServices();			
				confs2.getRazas(claseAnimalInput.text);
				confs2.addEventListener(ResultEvent.RESULT,getRazasResult);
			}
			/** Asigna el retorno del llamado de cargarRazas a un arrayCollection para mostrar las configuraciones
		 	 * 	@author  "Sebastian Arancibia"
			 * */
			public function getRazasResult(event:ResultEvent):void
			{
				razas = event.result as ArrayCollection;	
			}
			
			/**
			* Funcion que llena las opciones de razas segun la clase de animal seleccionada
			* @param event Evento proveniente de la accion realizada al inicar el panel
			* @author  Sebastian Arancibia
			*/
        	private function selClaseAnimal(event:Event):void {
        		var confs2:configuracionServices= new configuracionServices();			
				confs2.getConfiguraciones("Especie");
				confs2.addEventListener(ResultEvent.RESULT,cargarDatosR);			
			}
			
			public function cargarDatosR(event:ResultEvent):void
			{
				especies = event.result as ArrayCollection;	
				
				var confs2:configuracionServices= new configuracionServices();	
				confs2.getRazas(claseAnimalInput.text);
				confs2.addEventListener(ResultEvent.RESULT,getRazasResult);
			}
			
			/**
			* Funcion escucha para agregar mascota
			* @param event Evento que verifica si la conexion se ha hecho satisfactoriamente
			* @author  Sebastian Arancibia 
			*/
			private function resultHandler(event:ResultEvent):void{
				var message:String= event.result as String;
				Alert.show(message);
			}
			
			/**
			* Funcion que comienza con el registro de mascota (validando datos)
			* @param event Evento proveniente de la accion anterior a llamar esta funcion
			* @author  Sebastian Arancibia
			*/
			private function registrarMascota(event:Event):void{
				addMascota();
				ini(event);
			}
			
			/**
			* Funcion que llama  a retornar todas las mascotas desde las capas inferiores
			* @author  Sebastian Arancibia
			*/
			private function getAllMascotas():void{
				var mascotaService:MascotaService = new MascotaService();
				mascotaService.addEventListener(ResultEvent.RESULT,getAllMascotasResult);
				mascotaService.getAllMascotas();
			}
			
			/**
			* Funcion que obtiene todas las mascotas anteriormente llamadas
			* @author  Sebastian Arancibia
			* @param event Evento proveniente desde la llamada a mascota service
			*/
			private function getAllMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
				mascotas.refresh();
			}
			
			/**
			* Funcion que llama a retornar todas las mascotas de un cliente
			* @author  Sebastian Arancibia
			*/
			private function getMascotas():void{
				var addMascotaService:AddMascotaService = new AddMascotaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				
				addMascotaService.getMascotas(buscadorCliente.rutClienteInput.text+buscadorCliente.rutClienteDVInput.text);
			}
			
			/**
			* Funcion que obtiene todas las mascotas de un cliente
			* @param event Evento proveniente de la llamada a addMascotaService
			* @author  Sebastian Arancibia
			*/
			private function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
				
				//Alert.show(mascotas.getItemAt(1).nombre);
				
				mascotas.refresh();
			}
			
			/**
			* Funcion que llama para retornar todos los clientes
			* @param rutCliente Rut del Cliente que se quiere retornar todos los clientes
			* @author  Sebastian Arancibia 
			*/
			
			private function getCliente(rutCliente:String):void{
				var addMascotaService: AddMascotaService = new AddMascotaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getClienteResult);

				addMascotaService.getCliente(rutCliente);
			}
			
			/**
			* Aquí van los comentarios del método
			* @param event Evento
			*/

			private function getClienteResult(event:ResultEvent):void{
				var nombreCliente:String = event.result as String;
				
				if(nombreCliente == null){
        			//Alert.show("Cliente no registrado!");
        			labelMessage.text = "Cliente no registrado."
        			datosMascota.visible = false;
        			Application.application.AdmIngreso2.setVisible(true);
        			Application.application.AdmIngreso2.labelMessage.text = "El cliente ingresado no esta registrado."
        			Application.application.AdmIngreso2.rut.text = buscadorCliente.rutClienteInput.text;
        			Application.application.AdmIngreso2.rut2.text = buscadorCliente.rutClienteDVInput.text;
        			this.setVisible(false);
        			dg.visible = true;
        			
        			ini(event);
        		}
        		else{
        			datosMascota.visible = true;
        			labelMessage.text = "Se ha accedido al cliente " + nombreCliente + " satisfactoriamente.";
   
        			ini(event);
        			dg.visible = true;
        		}
			}
			
			/**
			* Funcion que inserta una mascota
			*/
			private function addMascota():void{
				var mascota:Mascota = new Mascota();

				mascota.rutCliente = buscadorCliente.rutClienteInput.text + buscadorCliente.rutClienteDVInput.text;// + rutClienteDVInput.text;
				mascota.nombre = nombreInput.text;
				mascota.fechaNacimiento = fechaNacimientoInput.text;
				mascota.claseAnimal = claseAnimalInput.text;
				mascota.raza = razaInput.text;
				mascota.sexo = sexoInput.text
				mascota.estado = true;
				
				var addMascotaService:AddMascotaService=new AddMascotaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,addMascotaServiceResult);
				addMascotaService.addMascota(mascota);
			}
			
			/**
			* Funcion que responde a la insercion de la mascota anterior
			* @param event Evento
			*/
			private function addMascotaServiceResult(event:ResultEvent):void{
				var result:int = event.result as int ;
				if(!result>0)
					labelMessage.text = "Mascota no registrada."
				else{
					getMascotas();
					mascotas.refresh();
					labelMessage.text = "La mascota "+ nombreInput.text +" ha sido registrada.";
					nombreInput.text = "";
					fechaNacimientoInput.text = "";
					claseAnimalInput.text = "";
					razaInput.text = "";
					sexoInput.text = "";
					
				}
			}
			private function borrarTodo():void{
				buscadorCliente.rutClienteInput.text = "";
				buscadorCliente.rutClienteDVInput.text = "";
				nombreInput.text = "";
				claseAnimalInput.text = "";
				razaInput.text = "";
				sexoInput.text = "";
				fechaNacimientoInput.text = "";
				labelMessage.text = "";
				
				dg.dataProvider ="";
				
				Application.application.setInvisible();
            	Application.application.panel2.setVisible(true,false);
            	Application.application.AdmOpciones1.setVisible(true,false);
				
			}	
        ]]>
    </mx:Script>
 
 
	<!-- DATOS BUSQUEDA DE CLIENTE PARA REGISTRO DE MASCOTA --> 
	<mx:Label x="25" y="101" text="Nombre:" width="67" height="22"/>
	<mx:Label x="25" y="134" text="Fecha Nacimiento:" width="108.75" height="22"/>
	<mx:Label x="25" y="168" text="Especie:" width="108.75" height="22"/>
	<mx:Label x="350.5" y="166" text="Raza:" width="43.75" height="22"/>
	<mx:Label x="350.5" y="132" text="Sexo:" width="51.75" height="22"/>
	
	<!-- BOTON QUE DA ACCION A BUSQUEDA DE CLIENTE -->

	<!-- FICHA DE MASCOTA SELECCIONADA --> 
	<mx:Panel x="121.5" y="-12" width="585" height="323" layout="absolute"  visible="false" id="ficha">
			<mx:Label x="10" y="63" text="Nombre:" width="97"/>
			<mx:Label x="10" y="125" text="Tipo Animal:" width="97"/>
			<mx:Label x="10" y="95" text="Fecha Nacimiento:" width="114.5"/>
			<mx:Label x="10" y="155" text="Raza:" width="97"/>
			<mx:Label x="10" y="181" text="Sexo:" width="97"/>
			<mx:Label x="172" y="10" width="211" text="{dg.selectedItem.rut}" textAlign="center" id="rutClienteSeleccionado"/>
			<mx:Label x="172" y="23" width="211" text="{dg.selectedItem.nombre}" textAlign="center"/>
			<mx:Image x="343" y="61" source="{dg.selectedItem.imagenMascota}" width="209" height="157" id="fichaImagen"/>
			<mx:Button x="501" y="245" label="Salir" click="ficha.visible=false"/>
			<mx:Label x="129" y="63" width="165" text="{dg.selectedItem.nombreMascota}"/>
			<mx:Label x="129" y="95" width="165" text="{dg.selectedItem.fechaNacimiento}"/>
			<mx:Label x="129" y="125" width="165" text="{dg.selectedItem.tipoAnimal}"/>
			<mx:Label x="129" y="155" width="165" text="{dg.selectedItem.raza}"/>
			<mx:Label x="129" y="181" width="165" text="{dg.selectedItem.sexo}"/>
	</mx:Panel>	
			
	<mx:Canvas x="25" y="219" width="695.25" height="123" id="datosMascota" visible="true">
		
		<!-- DATOS DE REGISTRO DE MASCOTA --> 
		<!-- DATOS DE CLIENTE SELECCIONADO --> 
		
		 <!-- TABLA DE MASCOTAS DEL CLIENTE --> 
		<mx:DataGrid id="dg" color="0x323232" width="693" rowCount="3" y="0" x="0" variableRowHeight="true" dataProvider="{mascotas}"  visible="true" height="123">
		    <mx:columns>
		        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
		        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Nacimiento" width="100"/>
		        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
		        <mx:DataGridColumn dataField="raza" headerText="Raza" width="150"/>
		        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="95"/>
		        <mx:DataGridColumn dataField="imagen" headerText="Imagen" visible="false">
		        	<mx:itemRenderer>
	        			<mx:Component>
	        		    	<mx:Image width="15" height="15" horizontalAlign="center"/>
	        			</mx:Component>
		        	</mx:itemRenderer>
		        </mx:DataGridColumn> 
		    </mx:columns>
		</mx:DataGrid>
		
		<!-- BOTONES --> 
		
		<!-- OPCIONES PARA SUBIR IMAGEN -->
	</mx:Canvas>
	<mx:TextInput restrict="A-Z a-z -" x="139.75" y="99" width="169" id="nombreInput" maxChars="50"/>
	<mx:DateField x="139.75" y="132" width="169" id="fechaNacimientoInput"/>
	<mx:ComboBox x="139.75" labelField="nombre" y="166" width="169" id="claseAnimalInput" close="selRazas(event);" dataProvider="{especies}">
	</mx:ComboBox>
	<mx:ComboBox x="427.25" y="164" width="229" id="razaInput" dataProvider="{razas}" labelField="nombre">
	</mx:ComboBox>
	<mx:ComboBox x="427.25" y="130" width="156" id="sexoInput" dataProvider="{sexos}">
	</mx:ComboBox>
	<!--
	<ns1:FileUploader x="465.75" y="152" uploaded="uploadedHandler(event)" width="200.5">
	</ns1:FileUploader>
	-->
	<mx:Button x="545" y="353" label="Registrar" visible="true" click="registrarMascota(event)" id="registrar"/>
	<mx:Button x="632" y="353" label="Cancelar" width="84" id="cancelar" click="borrarTodo()" visible="true"/>
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente" fontWeight="bold"/>
	<mx:Label x="25" y="73" text="Mascota" fontWeight="bold"/>
	<ns2:BuscadorNombreRut x="25" y="36" id="buscadorCliente" keyFocusChange="buscarCliente(event)">
	</ns2:BuscadorNombreRut>
	<!--
	<mx:TileList x="465.75" y="9" width="200.5" height="135" dataProvider="{files}" itemRenderer="components.ItemRenderer"></mx:TileList>
	-->
</mx:Panel>




