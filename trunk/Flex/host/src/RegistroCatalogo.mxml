<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" title="Registrar Catálogo" borderColor="#15AD8F"  initialize="init()" xmlns:ns1="peluqueria.*" xmlns:ns2="util.*">
	<mx:Script>
		<![CDATA[
		
			//=======================================================================
			// FECHA: CREACIÓN: 24/10/09
			// AUTOR: Erwin Díaz
			// Comentarios: Registra los distintos cortes de pelo que se le hacen a
			// 				las mascotas, tambien registra los distintos tipos de 
			//				corte que ofrece la clinica veterinaria
			//=======================================================================
		
			import flash.display.Sprite;
			import mx.utils.ObjectUtil;
            import mx.events.CloseEvent;
			import mx.events.FlexMouseEvent;
			import mx.controls.Text;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import services.CatPeluqueriaService;
			import services.Validacion;
			import transferObjects.CatPeluqueria;
			import mx.core.Application;
			import services.Mensajes;
			import mx.collections.ArrayCollection;   
			
			[Bindable]private var cargos:ArrayCollection;
			private var confs:configuracionServices= new configuracionServices();
			import services.configuracionServices;
			
			
			private var vNombre:Boolean;
			private var regCat:CatPeluqueriaService;
			private var cat:CatPeluqueria;
			
			
			/***pertenecientes a la carga de una imagen***/
			import events.FileUploaderEvent;
			private var alrt:Alert;
            private var fileRef:FileReference;
           
			/*********************************************/

			/**
		 	 * 	@author  Erwin Díaz
			 *  Método que crea una instancia del transferObject catalogo,
			 *  posterior a la validacion de datos  y lo envia a usuarioServices		 		
			 * */
			
			/** 
			 *  Obtiene los tipos de servicio de peluquería desde el actionScript
		 	 * 	@author  Erwin Díaz
			 * */
			public function cargarDatos():void
			{	
				var confs2:configuracionServices= new configuracionServices();
				confs2.getConfiguraciones("ServPel");
				confs2.addEventListener(ResultEvent.RESULT,cargarDatosCargosR);
			}
			
			/** 
			 *  Asigna el retorno del llamado de cargarDatos a un arrayCollection para mostrar las configuraciones
		 	 * 	@author  Erwin Díaz
			 * */
			public function cargarDatosCargosR(event:ResultEvent):void
			{
				cargos = event.result as ArrayCollection;
			}
			
			private function registrar():void
			{					
				mens.text = "Está registrando";			 
				if(vNombre==true)
				{
					if(precio.costoBruto == ""){
						mens.text = "Ingrese un costo para el Corte"
					}
					else{
						cat					= new CatPeluqueria();
						cat.servicio		= tipo.text;											
						cat.nombre			= nomb.text;
						cat.precio	  		= precio.costoBruto;											
						cat.descripcion		= descripcion.text;
						regCat = new CatPeluqueriaService();
						regCat.addEventListener(ResultEvent.RESULT,registroCatResultado);
						regCat.regCatalogo(cat);				
					}																					
				}
				else
				{
					mens.text = Mensajes.getMensajeError(0);
				}			
			}
			/**
		 	 * 	@author  Erwin Díaz
			 *  retorna el resultado de la accion que se realizo:Registro.		
			 * */
			private function registroCatResultado(event:ResultEvent):void
			{
				var message:String= event.result as String;	
				var msj:String = "";
				if(message=="1"){
					msj = nomb.text+" fue Registrado";
				 	//resetVars(); 		
				 	//cancelando();		
    		 	}
				else{
					msj = nomb.text+" no fue Registrado";				
				}		
				mens.text = msj;	
			}
			
			/**
		 	 * 	@author  Erwin Díaz
			 *  Metodo que reinicia los campos de textos, tras una accion de cancelar
			 * 	o regitrar satisfactoriamente a un usuario.		 		
			 * */
			public function resetVars():void
			{	
				cargarDatos();			
				nomb.text 		= "";
				mens.text		= "";
				precio.costo.text		= "";
				precio.costoBruto = "";
				descripcion.text= "";
				tipo.selectedIndex = 0;
			}
			
			/**
		 	 * 	@author  Erwin Díaz
			 *  Validacion del nombre del usuario	 		
			 * */
			private function validarNombre(event:Event):void
			{
				if(Validacion.longitudMinima(nomb.text))
				{
					vNombre		= true;
					trace("Válido");
					mens.text = "válido";
				}
				else
				{
					
					vNombre		= false;
					mens.text = Mensajes.getMensajeError(1);
				}	
			}
			/**
		 	 * 	@author  Erwin Díaz
			 *  Inicia los eventos de las entradas de texto que requieren revision		
			 * */
			private function iniListener():void
			{
				nomb.addEventListener(KeyboardEvent.KEY_UP,validarNombre);
				
			}

			
				
			/**
            * Función encargada de habilitar el botón registrar
            * si el combobox mantiene seleccionada la etiqueta "--Seleccione--"
            * el botón "Registrar" permanecerá desabilitado
            */
            private function activarBoton():void
            {
            	if(tipo.selectedLabel != '--Seleccione--'){
            		regCatalogo.enabled=true;
            	}
            	else 
            		regCatalogo.enabled=false;
            }
            /**
			 * Al cancelar la operación se muestra un panel que solo tiene el 
			 * mensaje "seleccione una opcion del menú"
			 * 
			 */
			private function cancelando():void
			{
				this.setVisible(false,false);
				Application.application.panel2.setVisible(true,false);
			}
			
			/**
			 * Funciones pertenecientes a la carga de una imagen
			 * @autor Erwin Díaz
			 * 
			 */
			private function init():void
            {              
                fileRef = new FileReference();
                fileRef.addEventListener(Event.SELECT, fileRef_select);
                fileRef.addEventListener(Event.COMPLETE, fileReference_complete);
                
            }
			/**
			 * Carga la imagen al filereference para luego pasarla 
			 * como fuente al componente Image
			 * @autor Erwin Díaz
			 */
            private function fileRef_select(evt:Event):void {
               //fileRef.
                
            }
            /**
            * Pasa la imagen cargada dentro del file reference como fuente
            * al componente de tipo imagen
            * @autor Erwin Díaz
            */
             private function fileReference_complete(evt:Event):void {
              //imagen.source = fileRef.data;
            }

				
		]]>
	</mx:Script> 
	<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" width="120" height="25" x="464" label="Registrar" click="{registrar()}" y="317" id="regCatalogo" enabled="false"/>
	<mx:TextInput x="116" y="40" width="201" restrict="A-Z a-z ñ Ñ Á É Í Ó Ú á é í ó ú" includeInLayout="true" id="nomb"  click="iniListener()" enabled="true" maxChars="20"/>
	<mx:Label x="24" y="118" text="Precio:"  textAlign="left"/>
	<mx:Label x="24" y="79" text="Servicio:" textAlign="left"/>
	<mx:Label x="24" y="40" text="Nombre:" width="69" />
	<mx:Label x="24" y="166" text="Descripción:"/>
	<mx:Label x="169" y="372" width="407" height="17" id="mens" fontWeight="bold" textAlign="center"/>
	
	<mx:ComboBox x="116" y="79" width="163" id="tipo" dataProvider="{cargos}"  labelField="nombre" close="{activarBoton()}" toolTip="Seleccione un tipo de registro para continuar"/>
	
	<mx:Button x="594" y="317" width="120" label="Cancelar" id="cancelarCatalogo" click="cancelando()" height="25" cornerRadius="6" toolTip="Cancelar el registro de catálogo">
	</mx:Button>
	<mx:TextArea x="116" y="165" height="106" width="201" toolTip="Descripción del servicio" id="descripcion"/>
	<ns2:Precio x="116" y="118" id="precio">
	</ns2:Precio>
</mx:Panel>
