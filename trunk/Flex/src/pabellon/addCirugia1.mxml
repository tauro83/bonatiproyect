<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registro Cirugía" xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
        <![CDATA[
        	import transferObjects.Cliente;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
        	import mx.controls.Alert;
            import mx.collections.ArrayCollection;
        	import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
  			import flash.display.Sprite;
		    import flash.events.*;
		    import flash.net.FileReference;
		    import flash.net.FileReferenceList;
		    import mx.rpc.events.ResultEvent;
			import mx.controls.Image;
		    import transferObjects.Person;
		    import transferObjects.Cirugia;
		    import mx.core.Application;
		     import services.BusquedaService;
		   
			
			[Bindable]
			private var files:ArrayCollection=new ArrayCollection();
		    private var vResult:ValidationResultEvent;
		    public var clienteBD:Cliente;
		    [Bindable]
		    public var tiposC:ArrayCollection;
		    [Bindable]
		    public var vetesC:ArrayCollection;
		    [Bindable]
		    public var ayudantesC:ArrayCollection;
		    [Bindable]
			private var clientes:ArrayCollection;
		    
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		      

			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Funcion que busca un cliente, en la base de datos, para esto primero verifica 
			 * si el rut esta ingresado correctamente, en caso de estar incorrecto lo informa por pantalla.
			 * En caso contrario realiza las llamadas a la capa de java, la cual procesara la soliitud, y 
			 * retornara si el cliente existe o no.
			 * @param event Evento
			 */
        	private function buscarCliente(event:Event):void{
        		if(rutClienteDVInput.text != "" && rutClienteInput.text != ""){
        			ini();
        			var Numero:String = rutClienteInput.text;
        			var Dv:String = rutClienteDVInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
				
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
				
					Resto = 11-(suma%11);
					if(DigVer[Resto] != Dv.toUpperCase()){
						labelMessage.text = "El Rut que ha ingresado es incorrecto.";
					}
					else{
						labelMessage.text = "";
						rutClienteInput.errorString = "";
						getCliente(rutClienteInput.text);
					}
        		}		
        	}
        	
        	/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados.
			 */
        	private function getCliente(rutCliente:String):void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getClienteResult);
				addMascotaService.getCliente(rutCliente);
			}
			
			
			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados. Se procesa el resultado del metodo 
			 * anterior.
			 * @param event Evento
			 */
			public function getClienteResult(event:ResultEvent):void{
				clienteBD = event.result as Cliente;
				
				if(clienteBD.nombre == null){
        			labelMessage.text = "Cliente no registrado."
        			
        		}
        		else{
        			this.inputClienteNombre.text = clienteBD.nombre;
        			labelMessage.text = "Se ha accedido al cliente "+clienteBD.nombre;
        			ini();
        		}
			}
        	
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido el resultado
			* de la comunicacion con la capa logica.
			* @param event Evento
			*/
	        private function ini():void{
	        	//datosMascota.visible = true;
	        	
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	        }
	         
        	
        					
					
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente.
			*/
			public function getMascotas():void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addMascotaService.getMascotas(rutClienteInput.text);
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente. 
			 * Se almacena el resultado del metodo anterior en la variable mascotas.
			* @param event Evento
			*/
			public function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todos los tipos de cirugias, para que sean cargados al panel de registrar cirugia, 
			 * para que se pueda seleccionar.
			*/		
			public function getTiposCirugias():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposC);
				addMascotaService.getTiposCirugias();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del evento anterior, almacenando la lista resultante en la 
			* variable tiposC. Que corresponde a la lista de todas las cirugias que existen.
			* @param event Evento
			*/
			public function getTiposC(event:ResultEvent):void
			{
				tiposC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			* veterinarios esto lo hace a traves de la clase AddCirugiaService. 
			*/
			public function getTiposVeterinarios():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposV);
				addMascotaService.getTiposVeterinarios();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			* variable vetesC. Que corresponde a la lista veterinarios que existen en el sistema.
			* @param event Evento
			*/
			public function getTiposV(event:ResultEvent):void
			{
				vetesC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			* veterinarios y ayudantes del sistema esto lo hace a traves de la clase AddCirugiaService. 
			*/
			public function getTiposAyudantes():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposA);
				addMascotaService.getTiposAyudantes();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			* variable ayudantesC. Que corresponde a la lista de veterinarios y ayudantes que existen en 
			 * el sistema.
			* @param event Evento
			*/
			public function getTiposA(event:ResultEvent):void
			{
				ayudantesC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa los datos ingresados en este panel, y muestra el panel 
			* en donde se realiza el registro de cirugia, cargando los datos correspondientes, 
			* para que el otro panel posea todos los datos.
			*/
			public function regCiru():void
			{
				
				if(dg.selectedItem){
					var nuevacir:addCirugia = Application.application.cliRegistro2;
					nuevacir.iniciarPanel();
					this.labelMessage.text="";
					var listCont2:Array = new Array();
					listCont2 = dg.selectedItem.nombre.split(" ",1);
					var nombre:String = listCont2.pop();
					nuevacir.nombreMascota=nombre;
					nuevacir.nombMasc.text=nombre;
					nuevacir.clienteRut=this.rutClienteInput.text;
					nuevacir.clienteRut2=this.rutClienteDVInput.text;
					nuevacir.veterinarios2=this.vetesC;
					nuevacir.ayudantes2=this.ayudantesC;
					nuevacir.ayudantes3=this.ayudantesC;
					var i:int;
					var large:int = tiposC.length;
					for(i=0;i<large;i++){
						var text:String = tiposC.getItemAt(i,0) as String;
						nuevacir.tiposCir1.push(text);
						nuevacir.tiposCir2.push(text);
					}
					
					
					this.setVisible(false,false);
					nuevacir.setVisible(true,false);
				}
				else{
					this.labelMessage.text="Seleccione una Mascota para registrar la cirugía.";
				}
				
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que inicializa todos los valores y variables de este panel.
			*/
			public function iniciarPanel():void
			{
				this.getTiposCirugias();
				this.getTiposVeterinarios();
				this.getTiposAyudantes();
				this.mascotas=new ArrayCollection();
				this.dg.doubleClickEnabled=true;
				this.labelMessage.text="";
				this.rutClienteInput.text="";
				this.rutClienteDVInput.text="";
				this.inputClienteNombre.text="";
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que inicializa los valores de los tipos de cirugias, veterinarios y ayudantes.
			*/
			public function iniciarPanel1():void
			{
				this.getTiposCirugias();
				this.getTiposVeterinarios();
				this.getTiposAyudantes();
			}
			
			//Cliente ---------------------------
		   //funciona que busca todos los clientes
		   public function getAllClientes():void
		   {
		   		var busquedaService:BusquedaService = new BusquedaService();
		   		busquedaService.addEventListener(ResultEvent.RESULT,getAllClientesResult);
				busquedaService.getAllClientes();
		   }
		   
		   public function getAllClientesResult(event:ResultEvent):void
		   {
		   		clientes = event.result as ArrayCollection;
		   }
		   
		   public function buscarCliente2():void
		   {
		   		var nombre:String = inputClienteNombre.text;
		   		if(inputClienteNombre.text != ""){
		   			var largo:int = clientes.length;
		   			var i:int;
		   			
		   			
		   			for(i=0;i<largo;i++){
		   				var newCli:Cliente = clientes.getItemAt(i,0) as Cliente;
		   				if(nombre == newCli.nombre){
		   					
		   					this.rutClienteInput.text=newCli.rut;
		   					this.rutClienteDVInput.text=newCli.rut2;
		   					sacaDigito();
		   					ini();
		   					break;
		   				}

		   			}
		   		}
		 
		   }
		   
		   private function sacaDigito():void{        			
        		if(this.rutClienteDVInput.text==""){	
        			var Numero:String = rutClienteInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
				
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
					
					Resto = 11-(suma%11);
					if(Resto == 10){
						this.rutClienteDVInput.text="K";	
					}
					else{
						this.rutClienteDVInput.text=""+Resto;	
					}
					
        		}
     		}
		   		
			
				
        ]]>
    </mx:Script>
	
	<mx:Label x="330" y="38" text="Rut:" width="31"/>
	<mx:Label x="459.25" y="38" text="-" width="14.75" textAlign="center"/>
	<fc:AutoComplete id="inputClienteNombre" x="90" y="38" width="150" dataProvider="{clientes}" labelField="nombre" visible="true" click="getAllClientes()" focusOut="buscarCliente2()"/>
	<mx:TextInput  restrict="0-9" x="369" y="38" width="90.5" id="rutClienteInput" maxChars="9" change="rutClienteDVInput.enabled=true"/>
	<mx:TextInput x="470.75" y="38" width="19.5" id="rutClienteDVInput" maxChars="1" restrict="K k 0-9" focusOut="buscarCliente(event)"/>
	
	<mx:Panel x="121.5" y="-12" width="585" height="323" layout="absolute"  visible="false" id="ficha">
			<mx:Label x="10" y="63" text="Nombre:" width="97"/>
			<mx:Label x="10" y="125" text="Tipo Animal:" width="97"/>
			<mx:Label x="10" y="95" text="Fecha Nacimiento:" width="114.5"/>
			<mx:Label x="10" y="155" text="Raza:" width="97"/>
			<mx:Label x="10" y="181" text="Sexo:" width="97"/>
			<mx:Label x="172" y="10" width="211" text="{dg.selectedItem.rut}" textAlign="center" id="rutClienteSeleccionado"/>
			<mx:Label x="172" y="23" width="211" text="{dg.selectedItem.nombre}" textAlign="center"/>
			<mx:Image x="343" y="61" source="{dg.selectedItem.imagenMascota}" width="209" height="157" id="fichaImagen"/>
			<mx:Button x="501" y="245" label="Salir" click="ficha.visible=false"/>
			<mx:Label x="129" y="63" width="165" text="{dg.selectedItem.nombreMascota}"/>
			<mx:Label x="129" y="95" width="165" text="{dg.selectedItem.fechaNacimiento}"/>
			<mx:Label x="129" y="125" width="165" text="{dg.selectedItem.tipoAnimal}"/>
			<mx:Label x="129" y="155" width="165" text="{dg.selectedItem.raza}"/>
			<mx:Label x="129" y="181" width="165" text="{dg.selectedItem.sexo}"/>
	</mx:Panel>	

	
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente:" width="110" fontWeight="bold"/>
	<mx:DataGrid id="dg" color="0x323232" width="709" rowCount="3" y="96" x="25" variableRowHeight="true" dataProvider="{mascotas}" itemDoubleClick="regCiru()"  visible="true" height="251">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="522" y="353" label="Visualizar" visible="true" id="registrar" click="regCiru()" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Cancelar" width="102" id="cancelar" visible="true" height="23"/>
	
	<mx:Label x="25" y="70" text="Mascotas:" width="112.75" fontWeight="bold"/>
	<mx:Label x="25" y="38" text="Nombre:" width="77"/>
	
</mx:Panel>
