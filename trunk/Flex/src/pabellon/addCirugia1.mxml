<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registro Cirugía" xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
        <![CDATA[
        	import mx.events.FlexEvent;
        	import transferObjects.ConfiguracionVacuna;
        	import transferObjects.Cliente;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
            import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
		    import flash.events.*;
		    import mx.rpc.events.ResultEvent;
		    import mx.core.Application;
		    import transferObjects.Person;
		    import services.BusquedaService;
		    import services.configuracionServices;
			import services.Validacion;
			
			[Bindable]
		    public var clienteBD:Cliente;
		    [Bindable]
		    public var tiposC:ArrayCollection;
		    [Bindable]
		    public var vetesC:ArrayCollection;
		    [Bindable]
		    public var ayudantesC:ArrayCollection;
		    [Bindable]
			private var clientes:ArrayCollection = new ArrayCollection();
		    [Bindable]
			private var cliente2:ArrayCollection;
		    [Bindable]
			public var edita:Boolean;
			[Bindable]
			public var rutEnvi:String ="";
		    [Bindable]
			public var nomEnvi:String ="";
			
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		    
		    

			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Funcion que busca un cliente, en la base de datos, para esto primero verifica 
			 * si el rut esta ingresado correctamente, en caso de estar incorrecto lo informa por pantalla.
			 * En caso contrario realiza las llamadas a la capa de java, la cual procesara la soliitud, y 
			 * retornara si el cliente existe o no.
			 * @param event Evento
			 */
        	private function buscarCliente(event:Event):void{
        		if(this.rutEnvi != this.rutClienteInput.text){
        			if(rutClienteDVInput.text != "" && rutClienteInput.text != ""){
        				if(!Validacion.validaRut(rutClienteInput.text, rutClienteDVInput.text)){
							labelMessage.text = "El Rut que ha ingresado es incorrecto.";
						}
						else{
							labelMessage.text = "";
							rutClienteInput.errorString = "";
							getCliente(rutClienteInput.text);
						}
        			}
        		}		
        	}
        	
        	/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados.
			 */
        	private function getCliente(rutCliente:String):void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getClienteResult);
				addMascotaService.getCliente(rutCliente);
			}
			
			
			/**
		 	 * 	@author  "Jimmy Muñoz"
			 * 	@Fecha  13 Octubre
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio AddCirugiaService
			 * el cual envia las solicitudes, y devuelve los resultados. Se procesa el resultado del metodo 
			 * anterior.
			 * @param event Evento
			 */
			private function getClienteResult(event:ResultEvent):void{
				clienteBD = event.result as Cliente;
				
				if(clienteBD.nombre == null){
        			labelMessage.text = "Cliente no registrado."
        			
        		}
        		else{
        			this.inputClienteNombre.text = clienteBD.apellido.split(" ",1).pop()+" "+clienteBD.apellido2.split(" ",1).pop()+" "+clienteBD.nombre.split(" ",1).pop();
        			this.nomEnvi = this.inputClienteNombre.text;
        			this.rutEnvi = this.rutClienteInput.text;
        			labelMessage.text = "Se ha accedido al cliente "+clienteBD.nombre;
        			ini();
        		}
			}
        	
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido el resultado
			* de la comunicacion con la capa logica.
			* @param event Evento
			*/
	        private function ini():void{
	           	mascotas.removeAll();
	           	getMascotas();
	           	mascotas.refresh();
	        }
	         
        	
        					
					
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente.
			*/
			private function getMascotas():void{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addMascotaService.getMascotas(rutClienteInput.text);
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todas las mascotas que le pertenescan a un determinado cliente. 
			 * Se almacena el resultado del metodo anterior en la variable mascotas.
			* @param event Evento
			*/
			private function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que realiza la comunicacion a la capa logica a traves de AddCirugiaService,
			* solicitando todos los tipos de cirugias, para que sean cargados al panel de registrar cirugia, 
			 * para que se pueda seleccionar.
			*/		
			private function getTiposCirugias():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposC);
				addMascotaService.getTiposCirugias();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del evento anterior, almacenando la lista resultante en la 
			* variable tiposC. Que corresponde a la lista de todas las cirugias que existen.
			* @param event Evento
			*/
			private function getTiposC(event:ResultEvent):void
			{
				tiposC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			* veterinarios esto lo hace a traves de la clase AddCirugiaService. 
			*/
			private function getTiposVeterinarios():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposV);
				addMascotaService.getTiposVeterinarios();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			* variable vetesC. Que corresponde a la lista veterinarios que existen en el sistema.
			* @param event Evento
			*/
			private function getTiposV(event:ResultEvent):void
			{
				vetesC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			* veterinarios y ayudantes del sistema esto lo hace a traves de la clase AddCirugiaService. 
			*/
			private function getTiposAyudantes():void
			{
				var addMascotaService:AddCirugiaService = new AddCirugiaService();
				addMascotaService.addEventListener(ResultEvent.RESULT,getTiposA);
				addMascotaService.getTiposAyudantes();
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			* variable ayudantesC. Que corresponde a la lista de veterinarios y ayudantes que existen en 
			 * el sistema.
			* @param event Evento
			*/
			private function getTiposA(event:ResultEvent):void
			{
				ayudantesC = event.result as ArrayCollection;
			}
			
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que procesa los datos ingresados en este panel, y muestra el panel 
			* en donde se realiza el registro de cirugia, cargando los datos correspondientes, 
			* para que el otro panel posea todos los datos.
			*/
			private function regCiru():void
			{
				/**
				 * Si se selecciono un item del datagrid se realiza la acción.
				 */
				if(dg.selectedItem){
					var nuevacir:addCirugia = Application.application.cliRegistro2;
					nuevacir.iniciarPanel();
					this.labelMessage.text="";
					var listCont2:Array = new Array();
					listCont2 = dg.selectedItem.nombre.split(" ",1);
					var nombre:String = listCont2.pop();
					nuevacir.nombreMascota=nombre;
					nuevacir.nombMasc.text=nombre;
					nuevacir.clienteRut=this.rutClienteInput.text;
					nuevacir.clienteRut2=this.rutClienteDVInput.text;
					nuevacir.veterinarios2=this.vetesC;
					nuevacir.ayudantes2=this.ayudantesC;
					nuevacir.ayudantes3=this.ayudantesC;
					var i:int;
					var large:int = tiposC.length;
					for(i=0;i<large;i++){
						var text:String = tiposC.getItemAt(i,0) as String;
						nuevacir.tiposCir1.push(text);
						nuevacir.tiposCir2.push(text);
					}
					
					
					this.setVisible(false,false);
					nuevacir.setVisible(true,false);
				}
				else{
					this.labelMessage.text="Seleccione una Mascota para registrar la cirugía.";
				}
				
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que inicializa todos los valores y variables de este panel.
			*/
			public function iniciarPanel():void
			{
				this.nomEnvi="";
				this.rutEnvi="";
				this.inputClienteNombre.text="";
				this.inputClienteNombre.typedText="";
				this.clientes = new ArrayCollection();
				this.cliente2 = new ArrayCollection();
				edita=true;
				this.getTiposCirugias();
				this.getTiposVeterinarios();
				this.getTiposAyudantes();
				this.mascotas=new ArrayCollection();
				this.dg.doubleClickEnabled=true;
				this.labelMessage.text="";
				this.rutClienteInput.text="";
				this.rutClienteDVInput.text="";
			}
			
			/**
		 	* 	@author  "Jimmy Muñoz"
			* 	@Fecha  13 Octubre
			* Metodo que inicializa los valores de los tipos de cirugias, veterinarios y ayudantes.
			*/
			public function iniciarPanel1():void
			{
				this.getTiposCirugias();
				this.getTiposVeterinarios();
				this.getTiposAyudantes();
			}
			
			/**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que inicializa los valores de los clientes del sistema, para seleccionarlo 
			 * ingresando su apellido. Llamando a la funcion de BusquedaService.
			 */
		   private function getAllClientes():void
		   {
		   		if(edita){
		   			this.labelMessage.text="";
		   			var busquedaService:BusquedaService = new BusquedaService();
		   			busquedaService.addEventListener(ResultEvent.RESULT,getAllClientesResult);
					busquedaService.getAllClientes();
					this.edita=false;
				}		   		
		   }
		   
		   /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que almacena el resultado del metodo anterior en el arraycollection cliente2.
			* Y llama a la funcion concatena.
			*/
		   private function getAllClientesResult(event:ResultEvent):void
		   {
		   		cliente2 = event.result as ArrayCollection;
		   		concatena();
		   }
		   
		   /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
			*/
		   private function concatena():void
		   {
		   		var i:int;
		   		var max:int = cliente2.length;
		   		var cli:Cliente;
		   		var cli2:Cliente;
		   		
		   		for(i=0;i<max;i++){
		   			cli = cliente2.getItemAt(i,0) as Cliente;
		   			cli2 = new Cliente();
		   			cli2.nombre = ""+cli.apellido+" "+cli.apellido2+" "+cli.nombre;
		   			clientes.addItem(cli2);
		   		}
		   }
		   
		   /**
			*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
			* Metodo que busca al cliente, al momento de soltar el autocomplete del apellido, 
			 * procesando los datos, partiendo el texto, y guardandolo en el nombreN, apellidomN
			 * y en apellidopN.
			 */
		   private function buscarCliente2():void
		   {
		   		if(this.nomEnvi != this.inputClienteNombre.text){
		   			dg.setFocus();
		   			this.labelMessage.text="";
		   			var nombre:String = inputClienteNombre.text;
		   		
		   			if(inputClienteNombre.text != "" || inputClienteNombre.selectedLabel != ""){
		   				var largo:int = cliente2.length;
		   				var i:int;
		   				var sss:Array;
		   			
		   				sss = inputClienteNombre.text.split(" ",3);
		   		
		   				/**
		   				 * obtiene los datos de la division del nombre seleccionado.
			 			*/
		   				var nombreN:String = sss.pop();
		   				var apellidomN:String = sss.pop();
		   				var apellidopN:String = sss.pop();
		   			
		   				/**
		   				 * Compara los datos obtenidos de la division, con los que se 
		   				 * encuentran en el arreglo de clientes.
			 			*/
		   				for(i=0;i<largo;i++){
		   					var newCli:Cliente = cliente2.getItemAt(i,0) as Cliente;
		   					if(nombreN == newCli.nombre && apellidopN == newCli.apellido && apellidomN == newCli.apellido2){
		   						this.rutClienteInput.text=newCli.rut.substring(0,8);
		   						labelMessage.text = "Se ha accedido al cliente "+newCli.nombre;
		   						this.nomEnvi = this.inputClienteNombre.text;
        						this.rutEnvi = this.rutClienteInput.text;
		   						sacaDigito();
		   						ini();
		   						break;
		   					}

		   				}
		   				this.inputClienteNombre.text=this.nomEnvi;
		   				this.rutClienteInput.text=this.rutEnvi;
		   			}
		   		}
		   }
		   
		   /**
		   	*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
		   	* Función para obtener el dígito verificador, y para guardarlo en 
		   	* el input dedicado a almacenar esa variable.
			*/
		   private function sacaDigito():void{        			
        			
        			var Numero:String = rutClienteInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
				
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
					
					Resto = 11-(suma%11);
					if(Resto == 10){
						this.rutClienteDVInput.text="K";	
					}
					else{
						this.rutClienteDVInput.text=""+Resto;	
					}
					
        	
     		}
		   	
		   	/**
		   	*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
		   	* Metodo que retorna al panel principal de clinica.
			*/
     		private function vuelve():void
     		{
     			this.setVisible(false,false);
     			Application.application.panelClinicaPrincipal.setVisible(true,false);
     		}
			
			/**
		   	*   @author  "Jimmy Muñoz"
			* 	@Fecha  02 Noviembre
		   	* Metodo que permite, que la busqueda se realice mediante el ingreso del apellido.
			*/
			private function permite():void
     		{
     			edita = true;
     		}
			
			private function focusSale():void
     		{
     			dg.setFocus();

     		}
				
        ]]>
    </mx:Script>
	
	<mx:Label x="330" y="38" text="Rut:" width="31"/>
	<mx:Label x="457.25" y="38" text="-" width="14.75" textAlign="center"/>
	<fc:AutoComplete id="inputClienteNombre" typedTextChange="{getAllClientes()}" x="90" y="38" width="210" dataProvider="{clientes}" labelField="nombre" visible="true" enter="{focusSale()}" focusOut="{buscarCliente2()}"/>
	<mx:TextInput  restrict="0-9" x="370" y="38" width="90" id="rutClienteInput" maxChars="9" change="rutClienteDVInput.enabled=true"/>
	<mx:TextInput x="470" y="38" width="19.5" id="rutClienteDVInput" maxChars="1" restrict="K k 0-9" focusOut="buscarCliente(event)"/>
	
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente:" width="110" fontWeight="bold"/>
	<mx:DataGrid id="dg" color="0x323232" width="709" rowCount="3" y="92" x="25" variableRowHeight="true" dataProvider="{mascotas}" itemDoubleClick="regCiru()"  visible="true" height="243">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	        <mx:DataGridColumn dataField="estado" headerText="Estado" width="100" visible="false"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="522" y="353" label="Visualizar" visible="true" id="registrar" click="regCiru()" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Volver" width="102" id="cancelar" visible="true" height="23" click="vuelve()"/>
	
	<mx:Label x="25" y="65" text="Mascotas:" width="112.75" fontWeight="bold"/>
	<mx:Label x="25" y="38" text="Apellido:" width="68"/>
	
</mx:Panel>
