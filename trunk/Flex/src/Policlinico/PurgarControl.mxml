<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" show="getAllDatos()" activate="getAllDatos()" layout="absolute" 
	width="779" height="466" borderColor="#15AD8F" title="Anular Control" x="241" y="133" 
	xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
		<![CDATA[
		
			//=======================================================================
			// FECHA: CREACIÓN: 27 Octubre
			// AUTOR: Andres Garrido
			// Comentarios: Muestra todos los controles agendados
			//=======================================================================

			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import transferObjects.Control;
			import mx.rpc.events.ResultEvent;
			import flash.events.MouseEvent;
            import mx.events.FlexEvent;
            import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.core.Application;
			import mx.formatters.DateFormatter;
			import util.Properties;
			[Bindable]
			private var controles:ArrayCollection;
			[Bindable]
			private var atrib:String="";
			public var select:int = 0;
			
			public function verSelect(seleccionado:int):void{
				if(seleccionado == 0){
					verActivas.enabled = false;
					verNulas.enabled = true;
					verTodos.enabled = true;
					select =0;
				}
				if(seleccionado == 1){
					verActivas.enabled = true;
					verNulas.enabled = false;
					verTodos.enabled = true;
					select = 1;
				}
				if(seleccionado == 2){
					verActivas.enabled = true;
					verNulas.enabled = true;
					verTodos.enabled = false;
					select = 2;
				}
			}
			private function getAllDatos():void{
				verSelect(0);
				eliminar.setVisible(true);
				var getAll:GetAllControles = new GetAllControles();
				getAll.addEventListener(ResultEvent.RESULT,getAllDatosResult);
				getAll.getAllControles();
			}
		    private function getAllDatosResult(event:ResultEvent):void
			{
				controles = new ArrayCollection;
				var lista:ArrayCollection = event.result as ArrayCollection;
				var i:int;
				
				for(i=0;i<lista.length;i++){
					
					var control:Control = lista.getItemAt(i) as Control;
					control.dateToString();
					controles.addItem(control);
				}
				atrib='mascota';
			}
			private function filtrarNulas():void{
				verSelect(1);
				eliminar.setVisible(false);
				var getAll:GetAllControles = new GetAllControles();
				getAll.addEventListener(ResultEvent.RESULT,getAllDatosResult);
				getAll.getAllControlesAnu();
			}
			private function filtrarTodos():void{
				verSelect(2);
				eliminar.setVisible(false);
				var getAll:GetAllControles = new GetAllControles();
				getAll.addEventListener(ResultEvent.RESULT,getAllTodosResult);
				controles = new ArrayCollection;
				getAll.getAllControlesAnu();
				getAll.getAllControles();
			}
			private function getAllTodosResult(event:ResultEvent):void{
				
				var lista:ArrayCollection = event.result as ArrayCollection;
				var i:int;
				
				for(i=0;i<lista.length;i++){
					
					var control:Control = lista.getItemAt(i) as Control;
					control.dateToString();
					controles.addItem(control);
				}
				atrib='mascota';
			}
			/**
			 * Es llamada al hacer doble click en el datagrid o al presionar el 
			 * botón Anular, al hacer esto llama a la clase DeleteControl
			 * quien es la encargada de borrar un control de la BD 
			 */
			public function eliminarAtencion():void{
				if(Tabla.selectedItem!=null){
					if(comboboxMotivo.selectedIndex!=0){
						
						var motivoS:String;
						 if(comboboxMotivo.selectedLabel=='Otros'){
                        	motivoS=Application.application.login2.usuarioActivo+" "+motivo.text;
                        }
                        
                        else{
                        	motivoS=Application.application.login2.usuarioActivo+"  "+comboboxMotivo.text;
                        }
						var control:Control = controles.getItemAt(Tabla.selectedIndex) as Control;
						var deleteControl:DeleteControl = new DeleteControl();
						deleteControl.addEventListener(ResultEvent.RESULT,deleteControlResult);
						deleteControl.deleteControl(control.hora, control.fecha, control.responsable, motivoS);
					}
           			else{
           				mens.text = "Debe seleccionar un motivo para anular el Control";
           			}
	           	}
				else{
					mens.text=Properties.getMensaje("Advertencia", "14");
				}
				
			}
			/**
			 * Oyente para la funcion eliminarAtencion()
			 * toma el resultado de la ejecucion del borrado en la base de datos
			 * y lo evalua para informar al usuario lo sucedido
			 * si la variable es distinta de cero el resultado fue exitoso
			 * la variable es cero en caso contrario
			 */
			private function deleteControlResult(event:ResultEvent):void{
				var result:int = event.result as int ;
				if(result!=0)
				{
				   mens.text=Properties.getMensaje("Informacion", "42");
				   getAllDatos();
				}
				else
				   mens.text=Properties.getMensaje("Error", "29");
			}
			private function cancelando():void
			{
				this.setVisible(false,false);
				Application.application.panelClinicaPrincipal.setVisible(true,false);
			
			}
			/**
			 *Cambia el formato de la fecha para una mejor lectura del datagrid
			 */
			
			private function doLabel(item:Object, column:DataGridColumn):String {
				var dateFormatted:DateFormatter = new DateFormatter();
				dateFormatted.formatString = "DD/MM/YYYY";
				var rawDate:Date = new Date(item[column.dataField]);
				return dateFormatted.format(rawDate) as String;
			}
			
			
			/**
			 *  Corrige error de seleccionar el primero
			 * */
		    public function Seleccionar(event:Event):void
			{
			    if(input.selectedIndex==0)
			    {
			    	//input.text=input.selectedLabel;
			    	input.text= "";
			    }
			}
			/**
			 * Determina qué atributo es el que se debe filtrar para
			 * las búsquedas con el auto complete
			 */
			public function setAtrib():void{				
				switch(comboBox.selectedItem.label){
					case 'Nombre Mascota':
						atrib='mascota';
						break;
					case 'Descripción':
						atrib='descripcion';
						break;
					case 'Fecha Control':
						atrib='fechas';
						break;
					case 'Hora':
						atrib='hora';
						break;
					case 'Servicio':
						atrib='servicio';
						break;
					case 'Responsable':
						atrib='responsable';
						break;
				}
			}
			private function seleccionarMotivo (event:Event):void{   
            	if(comboboxMotivo.selectedLabel=='Otros'){
					motivo.visible=true;
				}
				else{
					motivo.visible=false;
					motivo.text="";
				}
           	}
		]]>
	</mx:Script>
	
	<!--Componentes gráficos-->
	
	
	<mx:ComboBox x="379" y="10" width="169" id="comboBox" click="setAtrib()" change="setAtrib()" >
		<mx:ArrayCollection>
			<mx:Object label="Nombre Mascota"/> 
			<mx:Object label="Descripción"/>
			<mx:Object label="Fecha Control"/> 
			<mx:Object label="Hora"/> 
			<mx:Object label="Servicio"/> 
			<mx:Object label="Responsable"/> 
		</mx:ArrayCollection>
	</mx:ComboBox>
	

	<fc:AutoComplete id="input" dataProvider="{controles}" labelField="{atrib}" close="Seleccionar(event)" x="59" y="10" width="246" />
	
	<mx:DataGrid x="10" y="52" width="739" id="Tabla" enabled="true" height="252" dataProvider="{controles}" itemDoubleClick="eliminarAtencion()">
		<mx:toolTip>Controles agendados en la veterinaria</mx:toolTip>
		<mx:columns>
			<mx:DataGridColumn headerText="Mascota" dataField="mascota" width="70"/>
			<mx:DataGridColumn headerText="Descripción" dataField="descripcion"/>
			<mx:DataGridColumn headerText="Fecha" dataField="fecha" width="100" labelFunction="doLabel"/>
			<mx:DataGridColumn headerText="Hora" dataField="hora" width="70"/>
			<mx:DataGridColumn headerText="Servicio" dataField="servicio" width="100"/>
			<mx:DataGridColumn headerText="Costo($)" dataField="costo" width="70"/>
			<mx:DataGridColumn headerText="Responsable" dataField="responsable" width="85"/>
			
	     </mx:columns>
	</mx:DataGrid>
	<mx:Button label="Anular" id="eliminar" height="23" width="102" x="537" y="338" click="eliminarAtencion()" cornerRadius="6" toolTip="Anula el control seleccionado" enabled="true"/>
	<mx:Label x="169" y="372" width="407" height="17" id="mens" fontWeight="bold" textAlign="center"/>
	<mx:Button x="647" y="338" label="Cancelar" id="cancelar" width="102" height="23" click="cancelando()" cornerRadius="6" toolTip="Regresa al panel anterior"/>
	<mx:Text x="10" y="12" text="Buscar" id="textBuscar"/>
	<mx:Text x="313" y="12" id="textFiltrar" text="Filtrar por"/>
	<mx:TextInput x="229" y="338" width="300" id="motivo" toolTip="Ingrese el motivo por el cual desea anular el control" visible="false"/>
	<mx:Text x="10" y="340" text="Motivo" fontWeight="bold"/>
	<mx:ComboBox x="61" y="338" id="comboboxMotivo" change="seleccionarMotivo(event)">
		<mx:ArrayCollection>
			<mx:Object label="-Seleccionar-"/>
			<mx:Object label="Registro incorrecto"/>
			<mx:Object label="Registro indeseado "/>
			<mx:Object label="Otros"/> 
		</mx:ArrayCollection>
	</mx:ComboBox>
	<mx:Label x="10" y="314" text="Ver:" id="label7"/>
	<mx:LinkButton x="169" y="314" label="Nulos" width="58" fontWeight="normal" id="verNulas" click="{filtrarNulas()}" toolTip="Seleccione tipo de vista, si ha ingresado un rut verá las consultas nulas de este, sino verá todas las consultas nulas del sistema"/>
	<mx:LinkButton x="61" y="314" label="Todos" width="58" fontWeight="normal" id="verTodos" click="{filtrarTodos()}" toolTip="Seleccione tipo de vista, si ha ingresado un rut verá las consultas nulas de este, sino verá todas las consultas nulas del sistema"/>
	<mx:LinkButton x="115" y="314" label="Válidos" width="60" fontWeight="normal" enabled="true" id="verActivas" click="{getAllDatos()}" toolTip="Seleccione tipo de vista, si ha ingresado un rut verá todas las consultas activas de este, sino verá todas las consultas activas del sistema"/>
	
</mx:Panel>
