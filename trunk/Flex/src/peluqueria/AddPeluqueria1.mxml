<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registro Peluqueria" xmlns:fc="http://www.adobe.com/2006/fc">
	<mx:Script>
        <![CDATA[
        	//=======================================================================
			// FECHA: CREACIÓN: 27/10/09
			// AUTOR: Jimmy Muñoz
			// Comentarios: Formulario para obtener datos del cliente y sus mascotas.
			//=======================================================================
			
        	import mx.events.FlexEvent;
        	import transferObjects.ConfiguracionVacuna;
        	import transferObjects.Cliente;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
            import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
		    import flash.events.*;
		    import mx.rpc.events.ResultEvent;
		    import mx.core.Application;
		    import transferObjects.Person;
		    import services.BusquedaService;
		    import services.configuracionServices;
			import services.Validacion;
			import Policlinico.AddVacunacionService;
			
			[Bindable]
		    public var clienteBD:Cliente;
		    [Bindable]
		    public var tiposS:ArrayCollection;
		    [Bindable]
		    public var vetesS:ArrayCollection;
		    [Bindable]
		    public var ayudantesS:ArrayCollection;
		    [Bindable]
			private var clientes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cliente2:ArrayCollection;
			[Bindable]
			public var edita:Boolean;
			[Bindable]
			public var rutEnvi:String ="";
		    [Bindable]
			public var nomEnvi:String ="";
			
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		      
		   [Bindable]private var servicios:ArrayCollection;
			private var confs:configuracionServices= new configuracionServices();

					
			
			/**
			 * Funcion que busca un cliente, en la base de datos, para esto primero verifica 
			 * si el rut esta ingresado correctamente, en caso de estar incorrecto lo informa por pantalla.
			 * En caso contrario realiza las llamadas a la capa de java, la cual procesara la soliitud, y 
			 * retornara si el cliente existe o no.
		 	 * 	@author  "Jimmy Muñoz"
			 * @param event Evento
			 */
        	private function buscarCliente(event:Event):void{
        		if(this.rutEnvi != this.rutClienteInput.text){
        			if(rutClienteDVInput.text != "" && rutClienteInput.text != ""){
        				if(!Validacion.validaRut(rutClienteInput.text, rutClienteDVInput.text)){
							labelMessage.text = "El Rut que ha ingresado es incorrecto.";
						}
						else{
							labelMessage.text = "";
							rutClienteInput.errorString = "";
							getCliente(rutClienteInput.text);
						}
        			}
        		}
        				
        	}
        	
        	/**
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio 
			 * AddVacunaonService el cual envia las solicitudes, y devuelve los resultados.
		 	 * 	@author  "Jimmy Muñoz"
			 */
        	private function getCliente(rutCliente:String):void{
				var addvacService:AddVacunacionService = new AddVacunacionService();
				addvacService.addEventListener(ResultEvent.RESULT,getClienteResult);
				addvacService.getCliente(rutCliente);
			}
			
			
			/**
			 * Metod que gestiona la comunicacion con la capa logica, a traves del servicio 
			 * AddvacunacionService el cual envia las solicitudes, y devuelve los resultados. 
			 * Se procesa el resultado del metodo 
			 * anterior.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
			private function getClienteResult(event:ResultEvent):void{
				clienteBD = event.result as Cliente;
				
				if(clienteBD.nombre == null){
        			labelMessage.text = "Cliente no registrado."
        			
        		}
        		else{
        			this.inputClienteNombre.text = clienteBD.apellido.split(" ",1).pop()+" "+clienteBD.apellido2.split(" ",1).pop()+" "+clienteBD.nombre.split(" ",1).pop();
        			this.nomEnvi = this.inputClienteNombre.text;
        			this.rutEnvi = this.rutClienteInput.text;
        			labelMessage.text = "Se ha accedido al cliente "+clienteBD.nombre;
        			ini();
        		}
			}
        	
			/**
			 * Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido 
			 * el resultado de la comunicacion con la capa logica.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
	        private function ini():void{
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	        }
	         
        	
        					
					
			/**
			 * Metodo que realiza la comunicacion a la capa logica a traves de AddVacunaService,
			 * solicitando todas las mascotas que le pertenescan a un determinado cliente.
		 	 * 	@author  "Jimmy Muñoz"
			 */
			private function getMascotas():void{
				var addvacService:AddVacunacionService = new AddVacunacionService();
				addvacService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addvacService.getMascotas(rutClienteInput.text);
			}
			
			/**
			 * Metodo que realiza la comunicacion a la capa logica a traves de AddVacunacionService,
			 * solicitando todas las mascotas que le pertenescan a un determinado cliente. 
			 * Se almacena el resultado del metodo anterior en la variable mascotas.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
			private function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			
			/**
			 * Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			 * veterinarios esto lo hace a traves de la clase AddVacunacionService. 
		 	 * @author  "Jimmy Muñoz"
			 */
			private function getTiposVeterinarios():void
			{
				var addvacService:AddVacunacionService = new AddVacunacionService();
				addvacService.addEventListener(ResultEvent.RESULT,getTiposS);
				addvacService.getTiposVeterinarios();
			}
			
			/**
			 * Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			 * variable vetesC. Que corresponde a la lista veterinarios que existen en el sistema.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
			private function getTiposS(event:ResultEvent):void
			{
				vetesS = event.result as ArrayCollection;
			}
			
			
			/**
			 * Metodo que procesa los datos ingresados en este panel, y muestra el panel 
			 * en donde se realiza el registro de vacuna, cargando los datos correspondientes, 
			 * para que el otro panel posea todos los datos.
		 	 * @author  "Jimmy Muñoz"
			 */
			private function regPeluqueria():void
			{
				/**
				 * Si se selecciono un item del datagrid se realiza la acción.
				 */
				if(dg.selectedItem){
					var nuevapeluqueria:AddPeluqueria = Application.application.addPeluq;
					nuevapeluqueria.iniciarPanel();
					this.labelMessage.text="";
					var listCont2:Array = new Array();
					listCont2 = dg.selectedItem.nombre.split(" ",1);
					var nombre:String = listCont2.pop();
					nuevapeluqueria.nombreMascota=nombre;
					nuevapeluqueria.nombMasc.text=nombre;
					nuevapeluqueria.clienteRut=this.rutClienteInput.text;
					nuevapeluqueria.clienteRut2=this.rutClienteDVInput.text;
					nuevapeluqueria.veterinarios2=this.vetesS;
					nuevapeluqueria.ayudantes2=this.ayudantesS;
					nuevapeluqueria.ayudantes3=this.ayudantesS;
										
					var i:int;
					var large:int = servicios.length;
					
					for(i=0;i<large;i++){
						var vac:ConfiguracionVacuna = this.servicios.getItemAt(i,0) as ConfiguracionVacuna;
						var text2:String = vac.nombre;

						nuevapeluqueria.tiposServ1.push(text2);
					}
					
					this.setVisible(false,false);
					nuevapeluqueria.setVisible(true,false);
				}
				else{
					this.labelMessage.text="Seleccione una Mascota para registrar la Peluqueria.";
				}
				
			}
			
			/**
			 * Metodo que inicializa todos los valores y variables de este panel.
		 	 * @author  "Jimmy Muñoz"
			 */
			public function iniciarPanel():void
			{
				this.nomEnvi="";
				this.rutEnvi="";
				this.inputClienteNombre.text="";
				this.inputClienteNombre.typedText="";
				this.clientes = new ArrayCollection();
				this.cliente2 = new ArrayCollection();
				edita=true;
				this.cargarDatos();
				this.getTiposVeterinarios();
				this.mascotas=new ArrayCollection();
				this.dg.doubleClickEnabled=true;
				this.labelMessage.text="";
				this.rutClienteInput.text="";
				this.rutClienteDVInput.text="";				
			}
			
			/**
			 * Metodo que inicializa los valores de los tipos de vacunas, veterinarios y ayudantes.
		 	 * 	@author  "Jimmy Muñoz"
			 */
			public function iniciarPanel1():void
			{
				this.getTiposVeterinarios();
				cargarDatos();
			}
			
			
			
			/**
			 * Metodo que inicializa los valores de los clientes del sistema, para seleccionarlo 
			 * ingresando su apellido. Llamando a la funcion de BusquedaService.
		 	 * 	@author  "Jimmy Muñoz"
			 */
		   private function getAllClientes():void
		   {
		   		if(edita){
		   			this.labelMessage.text="";
		   			var busquedaService:BusquedaService = new BusquedaService();
		   			busquedaService.addEventListener(ResultEvent.RESULT,getAllClientesResult);
					busquedaService.getAllClientes();
					this.edita=false;
		   		}
		   }
		   
		    /**
			 * Metodo que almacena el resultado del metodo anterior en el arraycollection cliente2.
			 * Y llama a la funcion concatena.
		 	 * 	@author  "Jimmy Muñoz"
			 */
		   private function getAllClientesResult(event:ResultEvent):void
		   {
		   		cliente2 = event.result as ArrayCollection;
		   		concatena();
		   }
		   
		   /**
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
		 	* 	@author  "Jimmy Muñoz"
			*/
		   private function concatena():void
		   {
		   		
		   		var i:int;
		   		var max:int = cliente2.length;
		   		var cli:Cliente;
		   		var cli2:Cliente;
		   		
		   		
		   		for(i=0;i<max;i++){
		   			cli= cliente2.getItemAt(i,0) as Cliente;
		   			cli2 = new Cliente();
		   			cli2.nombre = ""+cli.apellido+" "+cli.apellido2+" "+cli.nombre;
		   			clientes.addItem(cli2);
		   		}
		   		
		   }
		   
		   /**
			* Metodo que busca al cliente, al momento de soltar el autocomplete del apellido, 
			* procesando los datos, partiendo el texto, y guardandolo en el nombreN, apellidomN
			* y en apellidopN.
		 	* 	@author  "Jimmy Muñoz"
			*/
		   private function buscarCliente2():void
		   {
		   	  if(this.nomEnvi != this.inputClienteNombre.text){
		   		dg.setFocus();
		   		this.labelMessage.text="";
		   		var nombre:String = inputClienteNombre.text;
		   		if(inputClienteNombre.text != ""){
		   			var largo:int = cliente2.length;
		   			var i:int;
		   			var sss:Array;
		   			
		   			sss = inputClienteNombre.text.split(" ",3);

		   			
		   			/**
		   			 * obtiene los datos de la division del nombre seleccionado.
			 		*/
		   			var nombreN:String = sss.pop();
		   			var apellidomN:String = sss.pop();
		   			var apellidopN:String = sss.pop();
		   			
		   			/**
		   			 * Compara los datos obtenidos de la division, con los que se 
		   			 * encuentran en el arreglo de clientes.
			 		*/
		   			for(i=0;i<largo;i++){
		   				var newCli:Cliente = cliente2.getItemAt(i,0) as Cliente;
		   				if(nombreN == newCli.nombre && apellidopN == newCli.apellido && apellidomN == newCli.apellido2){
		   					this.rutClienteInput.text=newCli.rut.substring(0,8);
		   					labelMessage.text = "Se ha accedido al cliente "+newCli.nombre;
		   					this.nomEnvi = this.inputClienteNombre.text;
        					this.rutEnvi = this.rutClienteInput.text;
		   					sacaDigito();
		   					ini();
		   					break;
		   				}

		   			}
		   			this.inputClienteNombre.text=this.nomEnvi;
		   			this.rutClienteInput.text=this.rutEnvi;
		   		}
		   	  }
		 
		   }
		   
		   
		   /**
		   	* Función para obtener el dígito verificador, y para guardarlo en 
		   	* el input dedicado a almacenar esa variable.
		 	* 	@author  "Jimmy Muñoz"
			*/
		   private function sacaDigito():void{        			
        			
        			var Numero:String = rutClienteInput.text;
					var suma:int = 0;
					var rut:String = Numero;
					var NumMag:int = 2;
					var Resto:int = 0;
					var j:int ;
					var i:int;
					var DigVer:Array = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "K", "0");
					var ParteNumerica:Array = new Array();
					if (rut.length == 0) { 

					}
					for ( j =0, i =0; j < rut.length; j++){
						if (rut.charAt(j) != ' ' && rut.charAt(j) != '.' && rut.charAt(j) != '-'){
							ParteNumerica[i] = rut.charAt(i);
							++i;
						}
					}
				
					for (i=ParteNumerica.length-1; i>=0; i--, NumMag++){
						suma += ParteNumerica[i] * NumMag;
						trace(suma +' '+ ParteNumerica[i] +' '+ NumMag);
						if (NumMag>6){
							NumMag =1;	
						}	
					}
					
					Resto = 11-(suma%11);
					if(Resto == 10){
						this.rutClienteDVInput.text="K";	
					}
					else{
						if(Resto == 11){
							this.rutClienteDVInput.text="0";	
						}
						else{
							this.rutClienteDVInput.text=""+Resto;
						}
							
					}
					
        		
     		}
     		
     		/**
		   	* Metodo que obtiene las vacunas desde la base de datos. Desde la clase configuracionServices.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function cargarDatos():void
     		{ 
     			confs.getConfiguracioneVacunas();
     			confs.addEventListener(ResultEvent.RESULT,cargarDatosR);
     		} 
     		
     		/**
		   	* Metodo que obtiene obtiene el resultado del metodo anterior, que son las vacunas 
		   	 * que se han registrado en el sistema.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function cargarDatosR(event:ResultEvent):void
     		{
     			servicios = event.result as ArrayCollection; 
     		}
     		
     		/**
		   	* Metodo que retorna al panel principal de clinica.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function vuelve():void
     		{
     			this.setVisible(false,false);
     			Application.application.panelClinicaPrincipal.setVisible(true,false);
     		}
			
			/**
		   	* Metodo que permite, que la busqueda se realice mediante el ingreso del apellido.
		 	 * 	@author  "Jimmy Muñoz"
			*/
			private function permite():void
     		{
     			edita = true;
     		}
     		
     		
     		/**
		   	* Metodo que quita el focus al rut o al nombre.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function focusSale():void
     		{
     			dg.setFocus();

     		}
     		
     		
        ]]>
    </mx:Script>
	
	<mx:Label x="330" y="38" text="Rut:" width="31"/>
	<mx:Label x="458.25" y="38" text="-" width="14.75" textAlign="center"/>
	<fc:AutoComplete id="inputClienteNombre" typedTextChange="{getAllClientes()}" x="90" y="38" width="210" dataProvider="{clientes}" labelField="nombre" visible="true" enter="{focusSale()}" focusOut="{buscarCliente2()}"/>
	<mx:TextInput  restrict="0-9" x="370" y="38" width="90" id="rutClienteInput" maxChars="9" change="rutClienteDVInput.enabled=true"/>
	<mx:TextInput x="470" y="38" width="19.5" id="rutClienteDVInput" maxChars="1" restrict="K k 0-9" focusOut="{buscarCliente(event)}" enter="{focusSale()}"/>
	
	
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente:" width="84.75" fontWeight="bold"/>
	<mx:DataGrid id="dg" color="0x323232" width="710" rowCount="3" y="92" x="25" variableRowHeight="true" dataProvider="{mascotas}" itemDoubleClick="{regPeluqueria()}"  visible="true" height="244">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="522" y="353" label="Visualizar" visible="true" id="registrar" click="{regPeluqueria()}" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Volver" width="103" id="cancelar" visible="true" height="23" click="{vuelve()}"/>
	
	<mx:Label x="25" y="65" text="Mascotas:" width="112.75" fontWeight="bold"/>
	<mx:Label x="25" y="38" text="Apellido:" width="64"/>
	
</mx:Panel>