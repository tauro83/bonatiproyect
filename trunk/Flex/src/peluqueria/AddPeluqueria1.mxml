<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" borderColor="#15AD8F" title="Registro Peluquería" xmlns:fc="http://www.adobe.com/2006/fc" xmlns:ns1="util.*">
	<mx:Script>
        <![CDATA[
        	//=======================================================================
			// FECHA: CREACIÓN: 11/11/09
			// AUTOR: Jimmy Muñoz
			// Formulario para obtener datos del cliente y sus mascotas.
			//=======================================================================
			import util.Properties;
        	import mx.events.FlexEvent;
        	import transferObjects.ConfiguracionVacuna;
        	import transferObjects.Cliente;
        	import services.AddMascotaService;
        	import mx.controls.DateField;
            import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;            
		    import flash.events.*;
		    import mx.rpc.events.ResultEvent;
		    import mx.core.Application;
		    import transferObjects.Person;
		    import services.BusquedaService;
		    import services.configuracionServices;
			import services.Validacion;
			import Policlinico.AddVacunacionService;
			import mx.controls.Alert;
			import services.GetCatalogos;
			import transferObjects.CatPeluqueria;
			import services.AddMascotaService;
			
			[Bindable]
		    public var clienteBD:Cliente;
		    [Bindable]
		    public var tiposS:ArrayCollection;
		    [Bindable]
		    public var vetesS:ArrayCollection;
		    [Bindable]
		    public var ayudantesS:ArrayCollection;
		    [Bindable]
			private var clientesP:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var cliente2P:ArrayCollection;
			[Bindable]
			public var editaP:Boolean;
			[Bindable]
			public var rutEnvi:String ="";
		    [Bindable]
			public var nomEnvi:String ="";
			
		    /**
			* Lista de amscotas del cliente asociado
			*/
		    [Bindable] 
		    public var mascotas:ArrayCollection = new ArrayCollection();
		    
		    [Bindable] 
		    public var cliente:Person;
		      
		   [Bindable]private var servicios:ArrayCollection;
			private var confs:configuracionServices= new configuracionServices();
			
			[Bindable]private var listCatalogosP:ArrayCollection;
			[Bindable]private var listCatP:ArrayCollection;
					
			/** 
         	 *  Metodo que obtiene todas los items del catalogo
         	 *  Los cuales seran utilizados para seleccionarlos y luego editarlos.
         	 * @author  "Jimmy Muñoz"
			 * */
			public function getAllCatalogo():void
			{	
				var getCatServices:GetCatalogos = new GetCatalogos();
				getCatServices.getCatalogo();
				getCatServices.addEventListener(ResultEvent.RESULT,getAllCatalogoR);							
			}
			/**
			 *  Metodo que asigna el retorno del metodo anterior a una lista la cual sera cargada en
			 *  el grid.
			 * 	@author  "Jimmy Muñoz"
			 * */
			public function getAllCatalogoR(event:ResultEvent):void
			{				
				listCatalogosP = event.result as ArrayCollection;	
				concatenaCatP();
			}
			
			/**
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
		 	* 	@author  "Jimmy Muñoz"
			*/
		   private function concatenaCatP():void
		   {
		   		
		   		var i:int;
		   		var max:int = listCatalogosP.length;
		   		var catalog:CatPeluqueria;
		   		var catalog2:CatPeluqueria;
		   		
		   		for(i=0;i<max;i++){
		   			catalog= listCatalogosP.getItemAt(i,0) as CatPeluqueria;
		   			catalog2 = new CatPeluqueria();
		   			var nombre:String = "";
		   			var nombres:Array = catalog.nombre.split(" ",10);
		   			var inombre:int;
		   			var mas:int = nombres.length;
		   			for(inombre = 0;inombre<mas;inombre++){
		   				var ns:String = nombres.pop();
		   				if(ns != ""){
		   					nombre = ns.concat(" "+nombre);
		   				}
		   				
		   			}		   			
		   			catalog2.nombre = ""+catalog.servicio.split(" ",1).pop()+" "+nombre;
		   			listCatP.addItem(catalog2);
		   		}
		   }
			
			
        	
			/**
			 * Funcion que llena la tabla de mascotas asociadas al cliente, despues de haber obtenido 
			 * el resultado de la comunicacion con la capa logica.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
	        private function ini():void{
	           	mascotas.removeAll();
	           	getMascotas();
				mascotas.refresh();
	        }
	         
        	
        					
					
			/**
			 * Metodo que realiza la comunicacion a la capa logica a traves de AddVacunaService,
			 * solicitando todas las mascotas que le pertenescan a un determinado cliente.
		 	 * 	@author  "Jimmy Muñoz"
			 */
			private function getMascotas():void{
				var addpelService:AddMascotaService = new AddMascotaService();
				addpelService.addEventListener(ResultEvent.RESULT,getAddMascotasResult);
				addpelService.getMascotas(nombRutInput.rutClienteInput.text+nombRutInput.rutClienteDVInput.text);
			}
			
			/**
			 * Metodo que realiza la comunicacion a la capa logica a traves de AddVacunacionService,
			 * solicitando todas las mascotas que le pertenescan a un determinado cliente. 
			 * Se almacena el resultado del metodo anterior en la variable mascotas.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
			private function getAddMascotasResult(event:ResultEvent):void{
				mascotas = event.result as ArrayCollection;
			}
			
			
			/**
			 * Metodo que se comunica con la capa logica, para obtener un listado con los nombres de los 
			 * veterinarios esto lo hace a traves de la clase AddVacunacionService. 
		 	 * @author  "Jimmy Muñoz"
			 */
			private function getTiposVeterinarios():void
			{
				var addpelService:AddPeluqueriaService = new AddPeluqueriaService();
				addpelService.addEventListener(ResultEvent.RESULT,getTiposS);
				addpelService.getTiposPeluqueros();
			}
			
			/**
			 * Metodo que procesa el resultado del metodo anterior, almacenando la lista resultante en la 
			 * variable vetesC. Que corresponde a la lista veterinarios que existen en el sistema.
		 	 * @author  "Jimmy Muñoz"
			 * @param event Evento
			 */
			private function getTiposS(event:ResultEvent):void
			{
				vetesS = event.result as ArrayCollection;
			}
			
			
			/**
			 * Metodo que procesa los datos ingresados en este panel, y muestra el panel 
			 * en donde se realiza el registro de vacuna, cargando los datos correspondientes, 
			 * para que el otro panel posea todos los datos.
		 	 * @author  "Jimmy Muñoz"
			 */
			private function regPeluqueria():void
			{
				/**
				 * Si se selecciono un item del datagrid se realiza la acción.
				 */
				if(dg.selectedItem){
					var nuevapeluqueria:AddPeluqueria = Application.application.addPeluq;
					nuevapeluqueria.iniciarPanel();
					this.labelMessage.text="";
					var listCont2:Array = new Array();
					listCont2 = dg.selectedItem.nombre.split(" ",1);
					var nombre:String = listCont2.pop();
					nuevapeluqueria.nombreMascota=nombre;
					nuevapeluqueria.nombMasc.text=nombre;
					nuevapeluqueria.clienteRut=this.nombRutInput.rutClienteInput.text;
					nuevapeluqueria.clienteRut2=this.nombRutInput.rutClienteDVInput.text;
					nuevapeluqueria.veterinarios2=this.vetesS;			
					var i:int;
					var large:int = listCatP.length;
					
					for(i=0;i<large;i++){
						var tipoPel:CatPeluqueria = this.listCatP.getItemAt(i,0) as CatPeluqueria;
						var text2:String = tipoPel.nombre;

						nuevapeluqueria.tiposServ1.push(text2);
					}
					
					this.setVisible(false,false);
					nuevapeluqueria.setVisible(true,false);
				}
				else{
					this.labelMessage.text=Properties.getMensaje("Advertencia", "38");
				}
				
			}
			
			/**
			 * Metodo que inicializa todos los valores y variables de este panel.
		 	 * @author  "Jimmy Muñoz"
			 */
			public function iniciarPanel():void
			{
				/*this.clientesP = new ArrayCollection();
				this.cliente2P = new ArrayCollection();
				this.nomEnvi="";
				this.rutEnvi="";
				editaP=false;
				editaP=true;*/
				this.nombRutInput.getAllClientes();
				this.nombRutInput.inputClienteNombre.text="";
				this.nombRutInput.inputClienteNombre.typedText="";
				
				this.getTiposVeterinarios();
				this.getAllCatalogo();
				this.mascotas=new ArrayCollection();
				this.dg.doubleClickEnabled=true;
				this.labelMessage.text="";
				this.nombRutInput.rutClienteInput.text="";
				this.nombRutInput.rutClienteDVInput.text="";
				this.listCatP = new ArrayCollection();
				this.listCatalogosP = new ArrayCollection();				
			}
			
			/**
			 * Metodo que inicializa los valores de los tipos de vacunas, veterinarios y ayudantes.
		 	 * 	@author  "Jimmy Muñoz"
			 */
			public function iniciarPanel1():void
			{
				this.getTiposVeterinarios();
				cargarDatos();
			}
			
			
			
			
		   
		   /**
			* Metodo que concatena el apellido paterno, con el apellido materno, y el nombre, para mostrarlo 
			* en el autocomplete, para buscar al cliente por el apellido.
		 	* 	@author  "Jimmy Muñoz"
			*/
		   private function concatenaP():void
		   {
		   		
		   		var i:int;
		   		var max:int = cliente2P.length;
		   		var cli:Cliente;
		   		var cli2:Cliente;
		   		
		   		
		   		for(i=0;i<max;i++){
		   			cli= cliente2P.getItemAt(i,0) as Cliente;
		   			cli2 = new Cliente();
		   			cli2.nombre = ""+cli.apellido+" "+cli.apellido2+" "+cli.nombre;
		   			clientesP.addItem(cli2);
		   		}
		   		
		   }
		   
		   
     		
     		/**
		   	* Metodo que obtiene las vacunas desde la base de datos. Desde la clase configuracionServices.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function cargarDatos():void
     		{ 
     			confs.getConfiguracioneVacunas();
     			confs.addEventListener(ResultEvent.RESULT,cargarDatosR);
     		} 
     		
     		/**
		   	* Metodo que obtiene obtiene el resultado del metodo anterior, que son las vacunas 
		   	 * que se han registrado en el sistema.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function cargarDatosR(event:ResultEvent):void
     		{
     			servicios = event.result as ArrayCollection; 
     		}
     		
     		/**
		   	* Metodo que retorna al panel principal de clinica.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function vuelve():void
     		{
     			this.setVisible(false,false);
     			Application.application.panelClinicaPrincipal.setVisible(true,false);
     		}
			
			     		
     		/**
		   	* Metodo que quita el focus al rut o al nombre.
		 	 * 	@author  "Jimmy Muñoz"
			*/
     		private function focusSale():void
     		{
     			dg.setFocus();

     		}
     		
     		
        ]]>
    </mx:Script>
	
	<ns1:BuscadorNombreRut x="25" y="36" id="nombRutInput"  keyFocusChange="getMascotas()" mouseFocusChange="getMascotas()">
	</ns1:BuscadorNombreRut>
	<mx:Label x="176" y="399" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
	<mx:Label x="25" y="10" text="Cliente:" width="84.75" fontWeight="bold"/>
	<mx:DataGrid id="dg" color="0x323232" width="710" rowCount="3" y="92" x="25" variableRowHeight="true" dataProvider="{mascotas}" itemDoubleClick="{regPeluqueria()}"  visible="true" height="244">
	    <mx:columns>
	        <mx:DataGridColumn dataField="nombre" headerText="Nombre" editable="true" width="100"/>
	        <mx:DataGridColumn dataField="fechaNacimiento" headerText="Fecha Nacimiento" width="100"/>
	        <mx:DataGridColumn dataField="claseAnimal" headerText="Especie" width="100"/>
	        <mx:DataGridColumn dataField="raza" headerText="Raza" width="100"/>
	        <mx:DataGridColumn dataField="sexo" headerText="Sexo" width="100"/>
	    </mx:columns>
	</mx:DataGrid>
	<mx:Button x="522" y="353" label="Visualizar" visible="true" id="registrar" click="{regPeluqueria()}" width="102" height="23"/>
	<mx:Button x="632" y="353" label="Volver" width="103" id="cancelar" visible="true" height="23" click="{vuelve()}"/>
	
	<mx:Label x="25" y="65" text="Mascotas:" width="112.75" fontWeight="bold"/>

	
</mx:Panel>