<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="779" height="466" title="Agenda" xmlns:ns1="*" initialize="iniciarAgenda()" borderColor="#15AD8F">
	<mx:Script>
		<![CDATA[
		
			//=======================================================================
			// FECHA CREACIÓN: 05/10/2009
			// AUTOR: Sebastian Arancibia
			// …. Clase que contiene los atributos del objeto DiaAgenda
			//=======================================================================
			
			/**
			 * Componente de Agenda
			 * @autor Sebastian Arancibia
			 */
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.core.Application;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import transferObjects.Usuario;
			import mx.rpc.events.ResultEvent;
			import administracion.UsuarioEditService;
			import flash.events.MouseEvent;
            import mx.events.FlexEvent;
            import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			
			//raullrich
			import transferObjects.Cita;
			import administracion.EditarCitaService;
			import administracion.EditCitaUpdate;
			private var cita:Cita;
			private var citaEditada:Cita;
			//eliminado CITA
			import transferObjects.Cita;
			import administracion.DeleteCitaService;
			import administracion.GetAllMascotas;
			//raullrich
			
			
			[Bindable]
			private var usuarios:ArrayCollection;
			private var usuars:ArrayCollection;
			private var usuars2:ArrayCollection;
			private var datosUsuarios:ArrayCollection;
			
			[Bindable]
			private var citas:ArrayCollection;
			
			
			
			import flash.events.MouseEvent;
            import mx.events.FlexEvent;
            import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			
			import services.DiaAgendaServices;
			import administracion.UsuarioEditService;
			import transferObjects.Usuario;
			
			[Bindable]
			public var diasBloqueados:ArrayCollection = new ArrayCollection();
			
			[Bindable]
            public var diaAgenda:ArrayCollection = new ArrayCollection(
                [{hora:"10:30"}, {hora:"11:00"}, {hora:"11:30"}, {hora:"12:00"}, {hora:"12:30"}, 
                 {hora:"15:30"}, {hora:"16:00"}, {hora:"16:30"}, {hora:"17:00"}, {hora:"17:30"}, 
                 {hora:"18:00"}, {hora:"18:30"}, {hora:"19:00"}, {hora:"19:30"}]); 
                 
            [Bindable]
            public var semanaAgenda:ArrayCollection = new ArrayCollection(
                [{hora:"10:30"}, {hora:"11:00"}, {hora:"11:30"}, {hora:"12:00"}, {hora:"12:30"}, 
                 {hora:"15:30"}, {hora:"16:00"}, {hora:"16:30"}, {hora:"17:00"}, {hora:"17:30"}, 
                 {hora:"18:00"}, {hora:"18:30"}, {hora:"19:00"}, {hora:"19:30"}]); 
                 
             /**
			 * Funcion para asignar agenda dependiendo de la fecha seleccionada
			 * @param even evento para asignar agenda
			 */   
            private function asignarAgenda(event:Event):void{
            	servicioOutput.text = servicioInput.text;
            	if(servicioInput.text != "Todos"){
            		labelMessage.text = "";
            	}
            	cambioFecha();
            }
           /**
			 * Funcion que bloquea dia
			 */ 
            private function bloquearDia():void{
            	diasBloqueados.addItem(fechaOutput.text);
            	this.agendaDia.selectedItem = null;
            	labelMessage.text = "El día " + fechaOutput.text + " ha sido bloqueado."
            	cambioFecha();
            	
            }
            /**
			 * Funcion que cambia de fecha
			 * 
			 */ 
            private function cambioFecha():void{
            	var date:Date = calendario.selectedDate;
            	fechaOutput.text = (date.getDate()) + "/" + (date.getMonth()+1) + "/" + date.getFullYear();
            	
            	if(diasBloqueados.contains(fechaOutput.text)){
            		fechaBloqueadoOutput.text = "(Bloqueado)";
            		agendaDia.selectable = false;
            		
            		bloquear.visible = false;
            		desbloquear.visible = true;
            	}
            	else{
            		agendaDia.selectable = true;
            		
            		fechaBloqueadoOutput.text = "";		
            		bloquear.visible = true;
            		desbloquear.visible = false;
            		
            		getDiaAgenda();
            		
            		//semanaAgenda = new ArrayCollection();
            		//getSemanaAgenda();
            		//agendaSemana.dataProvider = semanaAgenda;
            	}
            
            }
           /**
			 * Funcion que bloquea un dia
			 * 
			 */ 
            private function desbloquearDia():void{
            	var index:int = diasBloqueados.getItemIndex(fechaOutput.text);
            	diasBloqueados.removeItemAt(index);
            	labelMessage.text = "El día " + fechaOutput.text + " ha sido desbloqueado."
            	cambioFecha();
            }
            /**
			 * Funcion que retorna todas las citas de una fecha
			 * 
			 */ 
            public function getDiaAgenda():void{
				var diaAgenda:DiaAgendaServices = new DiaAgendaServices();
				diaAgenda.addEventListener(ResultEvent.RESULT,getDiaAgendaResult);
				diaAgenda.getDiaAgenda(fechaOutput.text);
			}
			/**
			 * Funcion que captura las citas de una fecha
			 * 
			 */ 
			private function getDiaAgendaResult(event:ResultEvent):void{
				citas = event.result as ArrayCollection;
            	llenarAgendaDia(citas);   
			}
			/**
			 * Funcion que llena la tabla con las citas
			 * 
			 */ 
			public function llenarItemDia(citass:ArrayCollection, hora:String):void{
				var copado:Boolean;
				var i:int;
				
				copado = false;
				for(i=0; i < citass.length; i++){
                	if(citass.getItemAt(i).hora == hora){
                		var b:Boolean = false;
                		var j:int;
                	
                		if(servicioInput.text == "Todos"){
	                		if(usuarioInput.text == "Todos"){
	                			var item:Object = citass.getItemAt(i);
	        					var k:int;
	        					for(k=0; k< datosUsuarios.length; k++){
	        						if(datosUsuarios.getItemAt(k).usuario == item.responsable){
	        							item.responsable = datosUsuarios.getItemAt(k).nombre + " " + datosUsuarios.getItemAt(k).apellido;
	        						}
	        					}
	        					
		    				    diaAgenda.addItem(item);
		        				copado = true;
	                		}
	                		else{
		                		for(j=0; j < datosUsuarios.length; j++){
		                			if(datosUsuarios.getItemAt(j).usuario == citass.getItemAt(i).responsable && 
		                				datosUsuarios.getItemAt(j).nombre + " " + datosUsuarios.getItemAt(j).apellido == usuarioInput.text){
		                				
		                				item = citass.getItemAt(i);
				        				for(k=0; k< datosUsuarios.length; k++){
				        					if(datosUsuarios.getItemAt(k).usuario == item.responsable){
	        									item.responsable = datosUsuarios.getItemAt(k).nombre + " " + datosUsuarios.getItemAt(k).apellido;
	        								}
	        							}
		                				diaAgenda.addItem(item);
		                				copado = true;
		                			   }
		                		}
	                		}
                		}
                		else{
                			if(usuarioInput.text == "Todos" && citass.getItemAt(i).servicio == servicioInput.text){
	                			item = citass.getItemAt(i);
	
	        					for(k=0; k< datosUsuarios.length; k++){
	        						if(datosUsuarios.getItemAt(k).usuario == item.responsable){
	        							item.responsable = datosUsuarios.getItemAt(k).nombre + " " + datosUsuarios.getItemAt(k).apellido;
	        						}
	        					}
		    				    diaAgenda.addItem(item);
		    				    //Aqui deberia colorear
		        				copado = true;
	                		}
	                		else{
		                		for(j=0; j < datosUsuarios.length; j++){
		                			if(datosUsuarios.getItemAt(j).usuario == citass.getItemAt(i).responsable && 
		                				datosUsuarios.getItemAt(j).nombre + " " + datosUsuarios.getItemAt(j).apellido == usuarioInput.text &&
		                				citass.getItemAt(i).servicio == servicioInput.text){
		                				
		                				item = citass.getItemAt(i);
				        				for(k=0; k< datosUsuarios.length; k++){
				        					if(datosUsuarios.getItemAt(k).usuario == item.responsable){
	        									item.responsable = datosUsuarios.getItemAt(k).nombre + " " + datosUsuarios.getItemAt(k).apellido;
	        								}
	        							}
		                				diaAgenda.addItem(item);
		                				copado = true;
		                			   }
		                		}
	                		}
                		}
                	}
                }
				if(!copado){
					diaAgenda.addItem({hora:hora});
				}
			}
			/**
			 * Funcion que llena la tabla de citas
			 * 
			 */ 
			public function llenarAgendaDia(citass:ArrayCollection):void{
				diaAgenda = new ArrayCollection();

                llenarItemDia(citass, "10:30");
                llenarItemDia(citass, "11:00");
                llenarItemDia(citass, "11:30");
                llenarItemDia(citass, "12:00");
                llenarItemDia(citass, "12:30");
                llenarItemDia(citass, "15:30");
                llenarItemDia(citass, "16:00");
                llenarItemDia(citass, "16:30");
                llenarItemDia(citass, "17:00");
                llenarItemDia(citass, "17:30");
                llenarItemDia(citass, "18:00");
                llenarItemDia(citass, "18:30");
                llenarItemDia(citass, "19:00");
                llenarItemDia(citass, "19:30");
                
                agendaDia.dataProvider = diaAgenda;
			} 
            /**
			 * Funcion que retorna todos los usuarios del sistema
			 * 
			 */ 
            public function getAllUsuarios():void{
				var personService:UsuarioEditService = new UsuarioEditService();
				personService.addEventListener(ResultEvent.RESULT,getAllUsuariosEResult);
				personService.getAllUsuariosE();	
			}
			/**
			 * Funcion que captura todos los usuarios del sistema
			 * 
			 */ 
			private function getAllUsuariosEResult(event:ResultEvent):void{
				usuarios = event.result as ArrayCollection;
				var responsables:ArrayCollection;
				responsables = new ArrayCollection();
				datosUsuarios = new ArrayCollection();
				
				var i:int;
				responsables.addItem({label:"Todos"});
				for(i=0; i < usuarios.length; i++){
            		var nombre:String = usuarios.getItemAt(i).nombre.split(" ",1);
            		var apellido:String = usuarios.getItemAt(i).apellidoPaterno.split(" ",1);
            		datosUsuarios.addItem({usuario:usuarios.getItemAt(i).usuario.split(" ",1), nombre:nombre, apellido:apellido});
            		responsables.addItem({label:(nombre + " " + apellido)});
            	}
            	usuarioInput.dataProvider = responsables;
			}  
            /**
			 * Funcion que inicia la agenda
			 * 
			 */ 
            private function iniciarAgenda():void{
            	var fechaActual:Date = new Date();
            	
            	getAllUsuarios();

            	servicioInput.dataProvider = ["Todos", "Pabellon", "Peluquería", "Policlinico", "Atencion a domicilio"];
            	servicioOutput.text = "Todos";
            	fechaOutput.text = fechaActual.getDate() + "/" + fechaActual.getMonth() + "/" +fechaActual.getFullYear();;	
            }    
            /**
			 * Funcion que inicia el calendario
			 * 
			 */  
			public function iniciarCalendario():void{
				calendario.dayNames = ["D", "L", "M", "M", "J", "V", "S", "D"];
				calendario.monthNames = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio",
										 "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
				calendario.disabledDays = [0];
			}
			/**
			 * Funcion que selecciona una cita
			 * 
			 */ 
			[Bindable]
			public var newCita:Cita;
			
			
			
			public function seleccionarCita(event:Event):void
			{
				var selectedRow:Object = event.currentTarget.selectedItem;
				if(servicioInput.text == "Todos" && selectedRow.mascota == null){
					labelMessage.text = "Debe seleccionar un servicio específico para poder Agendar.";
				}
				else{  
					//tomo los datos del datagrid y los copia a un objeto cita
					var newCitaUpdate:EditCitaUpdate = Application.application.editarCita;
					newCita = new Cita();					
					newCita.hora = selectedRow.hora;
					newCita.mascota = agendaDia.selectedItem.mascota;
					newCita.cliente = agendaDia.selectedItem.cliente;
					newCita.fecha   = agendaDia.selectedItem.fecha;
					newCita.servicio= agendaDia.selectedItem.servicio;
					newCita.usuario = agendaDia.selectedItem.responsable;
					
				    Application.application.agenda2.setVisible(false,false);
					newCitaUpdate.carga(newCita);				    				    
				    Application.application.editarCita.setVisible(true,false);
				    
				    // Application.application.editarCita.hora.text = selectedRow.hora;
			 	}

			}
			
		
			/**
			 * Funcion que consulta una accion realizada por el usuario
			 * dependiendo de cual sea se ocultaran o mostraran algunas opciones
			 */ 
			public function consultarAccion(event:Event):void{
				var selectedRow:Object = event.currentTarget.selectedItem;
				if(selectedRow.mascota == null && servicioInput.text != "Todos"){
					agendar.visible = true;
					ctm.visible = false;
					eliminar.visible = false;
					
				}
				else{
					if(selectedRow.mascota != null){
						labelMessage.text = "";
						agendar.visible = false;
						ctm.visible = true;
						eliminar.visible = true;
					}
					else{
						labelMessage.text = "Debe seleccionar un servicio específico para poder Agendar."
						agendar.visible = false;
						ctm.visible = false;
						eliminar.visible = false;
					}
				}	
			}
			////////////////////////////////////INICIO ELIMINAR CITA///////////////////////
			///////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////
			private function deleteCita(event:Event):void{
   				if(agendaDia.selectedItem!=null){
   					
   					
   					//Alert.show("¿Está seguro que desea eliminar los datos seleccionados? ","Confirme eliminación ", Alert.YES | Alert.NO);
   					var citaService:DeleteCitaService=new DeleteCitaService();
					citaService.addEventListener(ResultEvent.RESULT,deleteCitaResult);
					citaService.purgarCita(agendaDia.selectedItem.cliente);
   				}
   				else{
   					labelMessage.text="Debe primero seleccionar un elemento";
   				}
   				 
   			}
   			
   			private function deleteCitaResult(event:ResultEvent):void{
				var result:int = event.result as int ;
				if(result < 1)
				{
				   labelMessage.text="Cita Eliminada!";
				   //getAllMascotas();
				}
				else
				   labelMessage.text="Error en Eliminar Cita, inténtelo más tarde";
			}

			////////////////////////////////////TERMINA ELIMINAR CITA///////////////////////
			///////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////
 		]]>
 	</mx:Script>		
	<mx:DateChooser id="calendario" x="10" y="37" width="182" height="153" yearNavigationEnabled="true"
		initialize="iniciarCalendario()" change="cambioFecha()"/>
        <mx:LinkBar color="0x0050AA" horizontalAlign="right" width="98" dataProvider="{tiposCalendario}" x="651" y="10"/>
        <mx:ViewStack id="tiposCalendario" width="550" height="268" x="200" y="35">
            <mx:VBox id="dia" label="Día" width="100%" height="100%">
                <mx:Canvas width="550" height="266">
                    <mx:DataGrid id="agendaDia" x="0" y="0" width="550" height="266" dataProvider="{semanaAgenda}" doubleClickEnabled="true" itemDoubleClick="{seleccionarCita(event)}" itemClick="consultarAccion(event)">
                        <mx:columns>
                            <mx:DataGridColumn headerText="Hora" dataField="hora"  fontWeight="bold" width="45"/>
                            <mx:DataGridColumn headerText="Cliente" dataField="cliente"/>
                            <mx:DataGridColumn headerText="Mascota" dataField="mascota"/>
                            <mx:DataGridColumn headerText="Servicio" dataField="servicio"/>
                            <mx:DataGridColumn headerText="Responsable" dataField="responsable"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:Canvas>
            </mx:VBox>
            <!--
            <mx:VBox id="semana" label="Semana" width="100%" height="100%">
                <mx:Canvas width="550" height="266">
                    <mx:DataGrid id="agendaSemana" x="0" y="0" width="550" height="266"  textAlign="center" dataProvider="{diaAgenda}" selectable="false">
                        <mx:columns>
                        	<mx:DataGridColumn headerText="Hora" dataField="hora" textAlign="left" width="45" fontWeight="bold"/>
                            <mx:DataGridColumn headerText="Lunes" dataField="1"/>
                            <mx:DataGridColumn headerText="Martes" dataField="2"/>
                            <mx:DataGridColumn headerText="Miercoles" dataField="3"/>
                            <mx:DataGridColumn headerText="Jueves" dataField="4"/>
                            <mx:DataGridColumn headerText="Viernes" dataField="5"/>
                            <mx:DataGridColumn headerText="Sabado" dataField="6"/>
                        </mx:columns>
                    </mx:DataGrid>
                </mx:Canvas>
            </mx:VBox>
            -->
        </mx:ViewStack>
        <mx:Label x="10" y="198" text="Responsable:"/>
        <mx:ComboBox id="usuarioInput" x="10" y="224" width="182" close="asignarAgenda(event);">
		</mx:ComboBox>
        <mx:Label x="10" y="254" text="Servicio:"/>
        <mx:ComboBox id="servicioInput" x="10" y="280" width="182" close="asignarAgenda(event);">
		</mx:ComboBox>
        <mx:Button id="agendar" x="674" y="311" label="Agendar" visible="false"/>
        <mx:Button id="eliminar" x="674" y="311" label="Eliminar" visible="false" click="deleteCita(event)"/>
        <mx:Button x="606" y="311" label="Editar" id="ctm" visible="false"/>
        <mx:Button id="bloquear" x="200" y="311" label="Bloquear Día" click="bloquearDia()"/>
        <mx:Button id="desbloquear" x="200" y="311" label="Desbloquear Día" click="desbloquearDia()" visible="false"/>
        <mx:Text x="200" y="10" text="Fecha:" fontWeight="bold" visible="false"/>
        <mx:Label id="fechaOutput" x="248" y="10" visible="false"/>
        <mx:Label id="fechaBloqueadoOutput" x="200" y="14" visible="true"/>
        <mx:Text x="437" y="10" text="Servicio:" fontWeight="bold" visible="false"/>
        <mx:Label id="servicioOutput" x="491" y="10" visible="false"/>
        <mx:Label x="169" y="372" width="407" height="17" id="labelMessage" textAlign="center" fontWeight="bold"/>
</mx:Panel>
